# Generated by Django 3.2.16 on 2022-11-23 15:53

import datetime
import uuid

import autoslug.fields
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.contrib.postgres.operations
import django.contrib.postgres.search
import django.db.migrations.operations.special
import django.db.models.deletion
import django_better_admin_arrayfield.models.fields
from django.conf import settings
from django.contrib.admin.models import ADDITION, LogEntry
from django.core.management import call_command
from django.db import migrations, models
from django.db.migrations import RunPython
from django.db.models import Q

import erp.models
from erp import schema
from erp.models import Activite as Activite_class
from erp.models import get_last_position


def migrate_cheminement_types(apps, schema_editor):
    Cheminement = apps.get_model("erp", "Cheminement")
    for cheminement in Cheminement.objects.all():
        if cheminement.type == "int_entree_batiment_vers_accueil":
            cheminement.type = "int"
            cheminement.nom = "Cheminement intérieur de l'entrée du bâtiment jusqu'à l'accueil"
        elif cheminement.type == "ext_stationnement_vers_entree":
            cheminement.type = "ext"
            cheminement.nom = "Cheminement extérieur de la place de stationnement de l'ERP à l'entrée"
        elif cheminement.type == "ext_entree_parcelle_entree_vers_batiment":
            cheminement.type = "ext"
            cheminement.nom = "Cheminement extérieur de l'entrée de la parcelle de terrain à l'entrée du bâtiment"
        cheminement.save()


def migrate_data_forward(apps, schema_editor):
    # see https://stackoverflow.com/a/37310620/330911
    models = [
        apps.get_model("erp", "Activite"),
        apps.get_model("erp", "Cheminement"),
        apps.get_model("erp", "EquipementMalentendant"),
        apps.get_model("erp", "Erp"),
        apps.get_model("erp", "Label"),
    ]
    for Model in models:
        for instance in Model.objects.all():
            instance.save()


def migrate_data_backward(apps, schema_editor):
    pass


def add_user(apps, schema_editor):
    Erp = apps.get_model("erp", "Erp")

    for erp in Erp.objects.all():
        try:
            user = LogEntry.objects.get(
                content_type__model="erp",
                action_flag=ADDITION,
                object_id=erp.pk,
            ).user
            erp.user_id = user.pk
            erp.save()
            print(f"Set user for Erp {erp}: {user.username}")
        except LogEntry.DoesNotExist:
            continue


equipements_data = {}


def prepare_equipements_data(apps, schema_editor):
    # Valeurs existantes en base
    # ['Aucun', 'Autres', 'BIM', 'LSF', 'Service de communication à distance']
    Accessibilite = apps.get_model("erp", "Accessibilite")
    for a in Accessibilite.objects.all():
        existing = [eq["nom"] for eq in a.accueil_equipements_malentendants.values("nom")]
        to_add = []
        if "Aucun" in existing:
            to_add.append("aucun")
        if "Autres" in existing:
            to_add.append("autres")
        if "BIM" in existing:
            to_add.append("bim")
        if "LSF" in existing:
            to_add.append("lsf")
        if "Service de communication à distance" in existing:
            to_add.append("scd")
        equipements_data[a.pk] = to_add


def migrate_equipements_malentendant(apps, schema_editor):
    Accessibilite = apps.get_model("erp", "Accessibilite")
    for a in Accessibilite.objects.all():
        equipements = equipements_data.get(a.id)
        if equipements is not None:
            a.accueil_equipements_malentendants = equipements
            label = f"{a} (#{a.pk}) with {a.accueil_equipements_malentendants}"
            a.save()
            print(f"PASS: migrated {label}")
        else:
            print(f"WARN: no existing data for {label}")


def migrate_sources(apps, schema_editor):
    Erp = apps.get_model("erp", "ERP")
    for erp in Erp.objects.filter(source="access4all"):
        try:
            LogEntry.objects.get(content_type__model="erp", object_id=erp.pk)
            erp.source = "admin"
        except (LogEntry.DoesNotExist):
            erp.source = "public"
        except LogEntry.MultipleObjectsReturned:
            erp.source = "admin"
        erp.save()
        print(f"Updated source for Erp {erp.nom}: {erp.source}")


def migrate_equipement_choices(apps, schema_editor):
    Accessibilite = apps.get_model("erp", "Accessibilite")
    to_be_updated = Accessibilite.objects.filter(accueil_equipements_malentendants__contains=["aucun"])
    for accessibilite in to_be_updated:
        accessibilite.accueil_equipements_malentendants = [
            x for x in accessibilite.accueil_equipements_malentendants if x != "aucun"
        ]
        accessibilite.save()


def migrate_prestations_to_commentaire(apps, schema_editor):
    Accessibilite = apps.get_model("erp", "Accessibilite")
    for a in Accessibilite.objects.all():
        accueil_prestations = a.accueil_prestations or ""
        commentaire = a.commentaire or ""
        a.commentaire = (accueil_prestations + "\n\n" + commentaire).strip() or None
        a.save()


def migrate_value(previous_value):
    if previous_value == schema.PENTE_AUCUNE:
        return False, schema.PENTE_AUCUNE
    elif previous_value == schema.PENTE_LEGERE:
        return True, schema.PENTE_LEGERE
    elif previous_value == schema.PENTE_IMPORTANTE:
        return True, schema.PENTE_IMPORTANTE
    else:
        return None, None


def migrate_previous_data(apps, schema_editor):
    Accessibilite = apps.get_model("erp", "Accessibilite")
    for a in Accessibilite.objects.all():
        (presence, degre_difficulte) = migrate_value(a.cheminement_ext_pente)
        a.cheminement_ext_pente_presence = presence
        a.cheminement_ext_pente_degre_difficulte = degre_difficulte
        a.save()


def migrate_previous_data_diff(apps, schema_editor):
    Accessibilite = apps.get_model("erp", "Accessibilite")
    for a in Accessibilite.objects.all():
        if a.cheminement_ext_pente_degre_difficulte == "aucune":
            a.cheminement_ext_pente_degre_difficulte = "légère"
            a.save()


def migrate_sonnette_to_bouton(apps, schema_editor):
    Accessibilite = apps.get_model("erp", "Accessibilite")
    for a in Accessibilite.objects.all():
        if "sonnette" in a.entree_dispositif_appel_type:
            a.entree_dispositif_appel_type.remove("sonnette")
            if "bouton" not in a.entree_dispositif_appel_type:
                a.entree_dispositif_appel_type.append("bouton")
            a.save()


def gen_uuid(apps, schema_editor):
    Erp = apps.get_model("erp", "Erp")
    for row in Erp.objects.all():
        row.uuid = uuid.uuid4()
        row.save(update_fields=["uuid"])


def migrate_sanitaires_adaptes(apps, schema_editor):
    Accessibilite = apps.get_model("erp", "Accessibilite")
    for a in Accessibilite.objects.all():
        if a.sanitaires_adaptes is None:
            value = None
        else:
            value = bool(a.sanitaires_adaptes)
        a.sanitaires_adaptes_booltemp = value
        a.save()


def update_erp_accueil_equipements_malentendants(apps, schema_editor):
    Erp = apps.get_model("erp", "Erp")
    for erp in Erp.objects.filter(accessibilite__isnull=False).filter(
        Q(accessibilite__accueil_equipements_malentendants_presence=False)
        | Q(accessibilite__accueil_equipements_malentendants_presence__isnull=True),
        accessibilite__accueil_equipements_malentendants__len__gt=0,
    ):
        erp.accessibilite.accueil_equipements_malentendants = []
        erp.accessibilite.save()


def reset_user(apps, schema_editor):
    count = 0
    Erp = apps.get_model("erp", "Erp")
    qs = Erp.objects.filter(updated_at__gte=datetime.date(2022, 7, 5), accessibilite__isnull=False)
    print(f"{ qs.count()} erps sur la période")
    for erp in qs:
        try:
            if erp.user and erp.get_history() and erp.user != erp.get_first_user():
                if erp.get_first_user() is None and erp.user is not None:
                    pass
                else:
                    print(f"{erp.pk} Changement de contributeur : {erp.user} -> {erp.get_first_user()}")
                    erp.user = erp.get_first_user()
                    erp.save()
                    count += 1
        except Exception as e:
            print(e)

    print(f"{count} erps mis à jour")


def update_activite_position(apps, schema_editor):
    Activite = apps.get_model("erp", "Activite")
    for act in Activite.objects.all().order_by("nom"):
        act.position = get_last_position()
        act.save()


def add_activite_autre(apps, schema_editor):
    Activite = apps.get_model("erp", "Activite")
    Activite.objects.create(nom="Autre", vector_icon="building", position=get_last_position())


def reorder(apps, schema_editor):
    Activite = apps.get_model("erp", "Activite")

    for act in Activite.objects.all():
        if act.nom[0].islower():
            act.nom = act.nom.capitalize()
            act.save()
    Activite_class.reorder()


class Migration(migrations.Migration):

    replaces = [
        ("erp", "0001_initial"),
        ("erp", "0002_auto_20200131_1536"),
        ("erp", "0003_auto_20200131_1545"),
        ("erp", "0004_auto_20200131_1607"),
        ("erp", "0005_auto_20200131_1614"),
        ("erp", "0006_auto_20200131_1634"),
        ("erp", "0007_erp_geom"),
        ("erp", "0008_auto_20200131_2305"),
        ("erp", "0009_auto_20200203_1130"),
        ("erp", "0010_auto_20200203_1159"),
        ("erp", "0011_auto_20200203_1345"),
        ("erp", "0012_auto_20200203_1444"),
        ("erp", "0013_auto_20200203_1506"),
        ("erp", "0014_auto_20200203_1646"),
        ("erp", "0015_auto_20200204_0833"),
        ("erp", "0016_auto_20200204_0843"),
        ("erp", "0017_auto_20200204_0915"),
        ("erp", "0018_auto_20200204_0917"),
        ("erp", "0019_auto_20200204_0946"),
        ("erp", "0020_auto_20200205_0825"),
        ("erp", "0021_auto_20200205_0825"),
        ("erp", "0022_auto_20200205_0827"),
        ("erp", "0023_auto_20200205_0830"),
        ("erp", "0024_auto_20200205_0837"),
        ("erp", "0025_auto_20200205_0839"),
        ("erp", "0026_auto_20200205_0950"),
        ("erp", "0027_auto_20200205_1119"),
        ("erp", "0028_auto_20200205_1122"),
        ("erp", "0029_auto_20200205_1130"),
        ("erp", "0030_auto_20200205_1150"),
        ("erp", "0031_auto_20200205_1203"),
        ("erp", "0032_auto_20200205_1431"),
        ("erp", "0033_auto_20200205_1625"),
        ("erp", "0034_accessibilite_entree_plain_pied"),
        ("erp", "0035_auto_20200206_1109"),
        ("erp", "0036_auto_20200206_1548"),
        ("erp", "0037_erp_published"),
        ("erp", "0038_activite_slug"),
        ("erp", "0039_auto_20200212_1641"),
        ("erp", "0040_remove_activite_slug"),
        ("erp", "0041_auto_20200217_1208"),
        ("erp", "0042_auto_20200217_1336"),
        ("erp", "0043_auto_20200217_1406"),
        ("erp", "0044_activite_mots_cles"),
        ("erp", "0045_auto_20200220_1643"),
        ("erp", "0046_auto_20200226_1234"),
        ("erp", "0047_auto_20200226_1245"),
        ("erp", "0048_auto_20200226_1434"),
        ("erp", "0049_auto_20200226_1434"),
        ("erp", "0050_auto_20200227_1114"),
        ("erp", "0051_auto_20200227_1454"),
        ("erp", "0052_auto_20200227_1457"),
        ("erp", "0053_auto_20200227_1500"),
        ("erp", "0054_auto_20200227_1715"),
        ("erp", "0055_auto_20200227_1732"),
        ("erp", "0056_auto_20200303_2217"),
        ("erp", "0057_erp_user"),
        ("erp", "0058_auto_20200304_2339"),
        ("erp", "0059_auto_20200312_1736"),
        ("erp", "0060_auto_20200312_1859"),
        ("erp", "0061_auto_20200312_1903"),
        ("erp", "0062_auto_20200313_1100"),
        ("erp", "0063_auto_20200313_1431"),
        ("erp", "0064_auto_20200313_1433"),
        ("erp", "0065_auto_20200313_1436"),
        ("erp", "0066_auto_20200408_1015"),
        ("erp", "0067_auto_20200420_1713"),
        ("erp", "0068_auto_20200423_0023"),
        ("erp", "0069_auto_20200423_0931"),
        ("erp", "0070_auto_20200428_1105"),
        ("erp", "0071_auto_20200428_1105"),
        ("erp", "0072_auto_20200430_2356"),
        ("erp", "0073_auto_20200501_1128"),
        ("erp", "0074_auto_20200505_1355"),
        ("erp", "0075_auto_20200506_1333"),
        ("erp", "0076_auto_20200512_1443"),
        ("erp", "0077_auto_20200525_1447"),
        ("erp", "0078_delete_equipementmalentendant"),
        ("erp", "0079_auto_20200527_1815"),
        ("erp", "0080_auto_20200615_1757"),
        ("erp", "0081_auto_20200629_1213"),
        ("erp", "0082_auto_20200713_1523"),
        ("erp", "0083_auto_20200715_1252"),
        ("erp", "0084_auto_20200720_1644"),
        ("erp", "0085_auto_20200721_1719"),
        ("erp", "0086_auto_20200722_1725"),
        ("erp", "0087_auto_20200728_1511"),
        ("erp", "0088_statuscheck"),
        ("erp", "0089_auto_20200824_1643"),
        ("erp", "0090_auto_20200908_1548"),
        ("erp", "0091_auto_20200914_1720"),
        ("erp", "0091_auto_20200914_1638"),
        ("erp", "0092_merge_20200916_1733"),
        ("erp", "0093_auto_20200922_0802"),
        ("erp", "0094_auto_20201012_2339"),
        ("erp", "0095_auto_20201015_1743"),
        ("erp", "0096_auto_20201027_0917"),
        ("erp", "0097_auto_20201028_1001"),
        ("erp", "0098_auto_20201029_1524"),
        ("erp", "0099_activite_vector_icon"),
        ("erp", "0100_statuscheck_non_diffusable"),
        ("erp", "0101_auto_20201202_0933"),
        ("erp", "0102_auto_20201215_1647"),
        ("erp", "0103_auto_20210129_1101"),
        ("erp", "0104_equipement_presence"),
        ("erp", "0105_auto_20210203_1910"),
        ("erp", "0106_invert_data_on_cheminement_ext_terrain_accidente"),
        ("erp", "0107_auto_20210217_1446"),
        ("erp", "0108_auto_20210217_1748"),
        ("erp", "0109_accessibilite_entree_dispositif_appel_type"),
        ("erp", "0110_auto_20210222_1909"),
        ("erp", "0111_auto_20210414_1247"),
        ("erp", "0112_erp_contact_url"),
        ("erp", "0113_remove_accessibilite_accueil_prestations"),
        ("erp", "0114_alter_accessibilite_accueil_equipements_malentendants"),
        ("erp", "0115_auto_20210419_1033"),
        ("erp", "0116_auto_20210419_1309"),
        ("erp", "0117_auto_20210426_1112"),
        ("erp", "0118_alter_accessibilite_cheminement_ext_pente_degre_difficulte"),
        ("erp", "0119_alter_accessibilite_cheminement_ext_pente_longueur"),
        ("erp", "0120_alter_accessibilite_entree_dispositif_appel_type"),
        ("erp", "0121_erp_uuid"),
        ("erp", "0122_auto_20210513_1720"),
        ("erp", "0123_auto_20210513_1720"),
        ("erp", "0124_auto_20210525_1231"),
        ("erp", "0124_alter_accessibilite_entree_dispositif_appel_type"),
        ("erp", "0125_merge_20210603_0932"),
        ("erp", "0126_auto_20210604_1611"),
        ("erp", "0127_alter_accessibilite_labels_familles_handicap"),
        ("erp", "0128_delete_statuscheck"),
        ("erp", "0129_commune_contour"),
        ("erp", "0130_auto_20210628_1140"),
        ("erp", "0131_auto_20210628_1554"),
        ("erp", "0132_auto_20220328_1224"),
        ("erp", "0133_auto_20220328_1225"),
        ("erp", "0134_auto_20220328_1229"),
        (
            "erp",
            "0135_rename_cheminement_ext_terrain_accidente_accessibilite_cheminement_ext_terrain_stable",
        ),
        ("erp", "0136_auto_20220516_1502"),
        ("erp", "0137_auto_20220725_1045"),
        ("erp", "0138_auto_20220803_0845"),
        ("erp", "0139_auto_20220830_1157"),
        ("erp", "0140_auto_20220901_1426"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Activite",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom",
                    models.CharField(help_text="Nom de l'activité", max_length=255, unique=True),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Date de création"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Dernière modification"),
                ),
            ],
            options={
                "verbose_name": "Activité",
                "verbose_name_plural": "Activités",
                "ordering": ("nom",),
            },
        ),
        migrations.CreateModel(
            name="Label",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom",
                    models.CharField(help_text="Nom du label", max_length=255, unique=True),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Date de création"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Dernière modification"),
                ),
            ],
            options={
                "verbose_name": "Label d'accessibilité",
                "verbose_name_plural": "Labels d'accessibilité",
                "ordering": ("nom",),
            },
        ),
        migrations.CreateModel(
            name="Erp",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom",
                    models.CharField(
                        help_text="Nom de l'établissement ou de l'enseigne",
                        max_length=255,
                    ),
                ),
                (
                    "siret",
                    models.CharField(
                        blank=True,
                        help_text="Numéro SIRET si l'ERP est une entreprise",
                        max_length=14,
                        null=True,
                        verbose_name="SIRET",
                    ),
                ),
                (
                    "numero",
                    models.CharField(
                        blank=True,
                        help_text="Numéro dans la voie, incluant le complément (BIS, TER, etc.)",
                        max_length=12,
                        null=True,
                        verbose_name="Numéro",
                    ),
                ),
                (
                    "voie",
                    models.CharField(blank=True, help_text="Voie", max_length=255, null=True),
                ),
                (
                    "lieu_dit",
                    models.CharField(blank=True, help_text="Lieu dit", max_length=255, null=True),
                ),
                (
                    "code_postal",
                    models.CharField(help_text="Code postal", max_length=5),
                ),
                (
                    "commune",
                    models.CharField(help_text="Nom de la commune", max_length=255),
                ),
                (
                    "code_insee",
                    models.CharField(blank=True, help_text="Code INSEE", max_length=5, null=True),
                ),
                (
                    "activite",
                    models.ForeignKey(
                        blank=True,
                        help_text="Domaine d'activité de l'ERP. Attention, la recherche se fait sur les lettres accentuées",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="erp.activite",
                        verbose_name="Activité",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Date de création"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Dernière modification"),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True,
                        help_text="Géolocalisation (carte rafraîchie une fois l'enregistrement sauvegardé)",
                        null=True,
                        srid=4326,
                        verbose_name="Localisation",
                    ),
                ),
                (
                    "site_internet",
                    models.URLField(
                        blank=True,
                        help_text="Adresse du site internet de l'ERP",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "telephone",
                    models.CharField(
                        blank=True,
                        help_text="Numéro de téléphone de l'ERP",
                        max_length=20,
                        null=True,
                        verbose_name="Téléphone",
                    ),
                ),
                (
                    "published",
                    models.BooleanField(
                        default=True,
                        help_text="Statut de publication de cette fiche ERP: si la case est décochée, l'ERP ne sera pas listé publiquement.",
                        verbose_name="Publié",
                    ),
                ),
                (
                    "search_vector",
                    django.contrib.postgres.search.SearchVectorField(null=True, verbose_name="Search vector"),
                ),
            ],
            options={
                "verbose_name": "Établissement",
                "verbose_name_plural": "Établissements",
                "ordering": ("nom",),
            },
        ),
        migrations.CreateModel(
            name="EquipementMalentendant",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom",
                    models.CharField(help_text="Nom de l'équipement", max_length=255, unique=True),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Date de création"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Dernière modification"),
                ),
            ],
            options={
                "verbose_name": "Équipement sourd/malentendant",
                "verbose_name_plural": "Équipements sourd/malentendant",
                "ordering": ("nom",),
            },
        ),
        migrations.CreateModel(
            name="Accessibilite",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "entree_reperage",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence d'éléments de répérage de l'entrée",
                        null=True,
                        verbose_name="Repérage de l'entrée",
                    ),
                ),
                (
                    "entree_pmr_informations",
                    models.TextField(
                        blank=True,
                        help_text="Précisions sur les modalités d'accès de l'entrée spécifique PMR",
                        max_length=500,
                        null=True,
                        verbose_name="Infos entrée spécifique PMR",
                    ),
                ),
                (
                    "accueil_personnels",
                    models.CharField(
                        blank=True,
                        choices=[
                            (None, "Inconnu"),
                            ("aucun", "Aucun personnel"),
                            ("formés", "Personnels sensibilisés et formés"),
                            ("non-formés", "Personnels non-formés"),
                        ],
                        help_text="Présence et type de personnel d'accueil",
                        max_length=255,
                        null=True,
                        verbose_name="Personnel d'accueil",
                    ),
                ),
                (
                    "accueil_prestations",
                    models.TextField(
                        blank=True,
                        help_text="Description libre des prestations adaptées",
                        max_length=1000,
                        null=True,
                        verbose_name="Prestations d'accueil",
                    ),
                ),
                (
                    "sanitaires_presence",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence de sanitaires dans l'établissement",
                        null=True,
                        verbose_name="Sanitaires",
                    ),
                ),
                (
                    "sanitaires_adaptes",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Nombre de sanitaires adaptés dans l'établissement",
                        null=True,
                        verbose_name="Nombre de sanitaires adaptés",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Date de création"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Dernière modification"),
                ),
                (
                    "labels",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Labels d'accessibilité obtenus par l'ERP",
                        to="erp.Label",
                    ),
                ),
                (
                    "erp",
                    models.OneToOneField(
                        blank=True,
                        help_text="ERP",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="erp.erp",
                    ),
                ),
                (
                    "stationnement_pmr",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence de stationnements PMR au sein de l'ERP",
                        null=True,
                        verbose_name="Stationnements PMR dans l'ERP",
                    ),
                ),
                (
                    "stationnement_presence",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence de stationnements au sein de l'ERP",
                        null=True,
                        verbose_name="Stationnement dans l'ERP",
                    ),
                ),
                (
                    "entree_interphone",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence d'un dispositif d'appel (ex. interphone)",
                        null=True,
                        verbose_name="Dispositif d'appel",
                    ),
                ),
                (
                    "accueil_visibilite",
                    models.BooleanField(
                        blank=True,
                        help_text="La zone d'accueil est-elle visible depuis l'entrée ?",
                        null=True,
                        verbose_name="Visibilité de la zone d'accueil",
                    ),
                ),
                (
                    "entree_pmr",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence d'une entrée secondaire spécifique PMR",
                        null=True,
                        verbose_name="Entrée spécifique PMR",
                    ),
                ),
                (
                    "stationnement_ext_pmr",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence de stationnements PMR à proximité (200m)",
                        null=True,
                        verbose_name="Stationnements PMR à proximité",
                    ),
                ),
                (
                    "stationnement_ext_presence",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence de stationnements à proximité (200m)",
                        null=True,
                        verbose_name="Stationnement à proximité",
                    ),
                ),
                (
                    "accueil_equipements_malentendants",
                    models.ManyToManyField(
                        blank=True,
                        to="erp.EquipementMalentendant",
                        verbose_name="Équipements sourds/malentendants",
                    ),
                ),
                (
                    "aide_humaine",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence ou possibilité d'une aide humaine au déplacement",
                        null=True,
                    ),
                ),
                (
                    "ascenseur",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence d'un ascenseur ou d'un élévateur",
                        null=True,
                        verbose_name="Ascenseur/élévateur",
                    ),
                ),
                (
                    "escalier_main_courante",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence d'une main courante d'escalier",
                        null=True,
                        verbose_name="Main courante",
                    ),
                ),
                (
                    "escalier_marches",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Nombre de marches d'escalier. Indiquez 0 si pas d'escalier ou si présence d'un ascenseur/élévateur.",
                        null=True,
                        verbose_name="Marches d'escalier",
                    ),
                ),
                (
                    "escalier_reperage",
                    models.BooleanField(
                        blank=True,
                        help_text="Si marches contrastées, bande d'éveil ou nez de marche contrastés, indiquez “Oui”",
                        null=True,
                        verbose_name="Repérage de l'escalier",
                    ),
                ),
                (
                    "guidage_sonore",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence d'un dispositif de guidage sonore",
                        null=True,
                        verbose_name="Système de guidage sonore",
                    ),
                ),
                (
                    "largeur_mini",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Largeur minimale du passage ou rétrécissement, en centimètres",
                        null=True,
                        verbose_name="Largeur minimale",
                    ),
                ),
                (
                    "rampe",
                    models.CharField(
                        blank=True,
                        choices=[
                            (None, "Inconnu"),
                            ("aucune", "Aucune"),
                            ("fixe", "Fixe"),
                            ("amovible", "Amovible"),
                        ],
                        help_text="Présence et type de rampe",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "reperage_vitres",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence d'un repérage sur les surfaces vitrées",
                        null=True,
                        verbose_name="Répérage surfaces vitrées",
                    ),
                ),
                (
                    "entree_plain_pied",
                    models.BooleanField(
                        blank=True,
                        help_text="L'entrée est-elle de plain-pied ?",
                        null=True,
                        verbose_name="Plain-pied",
                    ),
                ),
            ],
            options={
                "verbose_name": "Accessibilité",
                "verbose_name_plural": "Accessibilité",
            },
        ),
        migrations.CreateModel(
            name="Cheminement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            (
                                "int_entree_batiment_vers_accueil",
                                "Cheminement intérieur de l'entrée du bâtiment jusqu'à l'accueil",
                            ),
                            (
                                "ext_stationnement_vers_entree",
                                "Cheminement extérieur de la place de stationnement de l'ERP à l'entrée",
                            ),
                            (
                                "ext_entree_parcelle_entree_vers_batiment",
                                "Cheminement extérieur de l'entrée de la parcelle de terrain à l'entrée du bâtiment",
                            ),
                        ],
                        default="int_entree_batiment_vers_accueil",
                        help_text="Type de circulation",
                        max_length=100,
                        verbose_name="Type",
                    ),
                ),
                (
                    "reperage_vitres",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence d'un repérage sur les surfaces vitrées",
                        null=True,
                        verbose_name="Répérage surfaces vitrées",
                    ),
                ),
                (
                    "bande_guidage",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence d'une bande de guidage",
                        null=True,
                        verbose_name="Bande de guidage",
                    ),
                ),
                (
                    "guidage_sonore",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence d'un dispositif de guidage sonore",
                        null=True,
                        verbose_name="Système de guidage sonore",
                    ),
                ),
                (
                    "largeur_mini",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Largeur minimale du passage ou rétrécissement, en centimètres",
                        null=True,
                        verbose_name="Largeur minimale",
                    ),
                ),
                (
                    "pente",
                    models.CharField(
                        blank=True,
                        choices=[
                            (None, "Inconnu"),
                            ("aucune", "Aucune"),
                            ("légère", "Légère"),
                            ("importante", "Importante"),
                        ],
                        help_text="Présence et type de pente",
                        max_length=15,
                        null=True,
                    ),
                ),
                (
                    "devers",
                    models.CharField(
                        blank=True,
                        choices=[
                            (None, "Inconnu"),
                            ("aucun", "Aucun"),
                            ("léger", "Léger"),
                            ("important", "Important"),
                        ],
                        help_text="Inclinaison transversale du cheminement",
                        max_length=15,
                        null=True,
                        verbose_name="Dévers",
                    ),
                ),
                (
                    "rampe",
                    models.CharField(
                        blank=True,
                        choices=[
                            (None, "Inconnu"),
                            ("aucune", "Aucune"),
                            ("fixe", "Fixe"),
                            ("amovible", "Amovible"),
                        ],
                        help_text="Présence et type de rampe",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "escalier_marches",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Nombre de marches d'escalier. Indiquez 0 si pas d'escalier ou si présence d'un ascenseur/élévateur.",
                        null=True,
                        verbose_name="Marches d'escalier",
                    ),
                ),
                (
                    "escalier_main_courante",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence d'une main courante d'escalier",
                        null=True,
                        verbose_name="Main courante",
                    ),
                ),
                (
                    "ascenseur",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence d'un ascenseur ou d'un élévateur",
                        null=True,
                        verbose_name="Ascenseur/élévateur",
                    ),
                ),
                (
                    "accessibilite",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="erp.accessibilite",
                    ),
                ),
                (
                    "escalier_reperage",
                    models.BooleanField(
                        blank=True,
                        help_text="Si marches contrastées, bande d'éveil ou nez de marche contrastés, indiquez “Oui”",
                        null=True,
                        verbose_name="Repérage de l'escalier",
                    ),
                ),
                (
                    "aide_humaine",
                    models.BooleanField(
                        blank=True,
                        help_text="Présence ou possibilité d'une aide humaine au déplacement",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Cheminement",
                "verbose_name_plural": "Cheminements",
            },
        ),
        migrations.AddIndex(
            model_name="erp",
            index=django.contrib.postgres.indexes.GinIndex(fields=["search_vector"], name="erp_erp_search__717de3_gin"),
        ),
        django.contrib.postgres.operations.TrigramExtension(),
        django.contrib.postgres.operations.UnaccentExtension(),
        migrations.AddIndex(
            model_name="erp",
            index=django.contrib.postgres.indexes.GinIndex(fields=["nom"], name="nom_trgm", opclasses=["gin_trgm_ops"]),
        ),
        migrations.AddField(
            model_name="activite",
            name="mots_cles",
            field=django_better_admin_arrayfield.models.fields.ArrayField(
                base_field=models.CharField(blank=True, max_length=40),
                blank=True,
                default=list,
                help_text="Liste de mots-clés apparentés à cette activité",
                size=None,
                verbose_name="Mots-clés",
            ),
        ),
        migrations.AddField(
            model_name="cheminement",
            name="nom",
            field=models.CharField(
                default="Cheminement indéterminé",
                help_text="Nom du cheminement, d'un point vers un autre (ex. Du stationnement à l'entrée de l'ERP)",
                max_length=255,
                verbose_name="Dénomination du cheminement",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="cheminement",
            unique_together={("accessibilite", "type", "nom")},
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_personnels",
            field=models.CharField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    ("aucun", "Aucun personnel"),
                    ("formés", "Personnels sensibilisés et formés"),
                    ("non-formés", "Personnels non-formés"),
                ],
                help_text="Présence et type de personnel d'accueil",
                max_length=255,
                null=True,
                verbose_name="Personnel d'accueil",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_visibilite",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    (True, "Oui"),
                    (False, "Non"),
                ],
                help_text="La zone d'accueil est-elle visible depuis l'entrée ?",
                null=True,
                verbose_name="Visibilité directe de la zone d'accueil",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="ascenseur",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    (True, "Oui"),
                    (False, "Non"),
                ],
                help_text="Présence d'un ascenseur ou d'un élévateur",
                null=True,
                verbose_name="Ascenseur/élévateur",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="escalier_main_courante",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    (True, "Oui"),
                    (False, "Non"),
                ],
                help_text="Présence d'une main courante d'escalier",
                null=True,
                verbose_name="Main courante",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="escalier_reperage",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    (True, "Oui"),
                    (False, "Non"),
                ],
                help_text="Si marches contrastées, bande d'éveil ou nez de marche contrastés, indiquez “Oui”",
                null=True,
                verbose_name="Repérage de l'escalier",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="rampe",
            field=models.CharField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    ("aucune", "Aucune"),
                    ("fixe", "Fixe"),
                    ("amovible", "Amovible"),
                ],
                help_text="Présence et type de rampe",
                max_length=20,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="reperage_vitres",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    (True, "Oui"),
                    (False, "Non"),
                ],
                help_text="Présence d'un repérage sur les surfaces vitrées",
                null=True,
                verbose_name="Répérage surfaces vitrées",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="ascenseur",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    (True, "Oui"),
                    (False, "Non"),
                ],
                help_text="Présence d'un ascenseur ou d'un élévateur",
                null=True,
                verbose_name="Ascenseur/élévateur",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="bande_guidage",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    (True, "Oui"),
                    (False, "Non"),
                ],
                help_text="Présence d'une bande de guidage",
                null=True,
                verbose_name="Bande de guidage",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="devers",
            field=models.CharField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    ("aucun", "Aucun"),
                    ("léger", "Léger"),
                    ("important", "Important"),
                ],
                help_text="Inclinaison transversale du cheminement",
                max_length=15,
                null=True,
                verbose_name="Dévers",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="escalier_main_courante",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    (True, "Oui"),
                    (False, "Non"),
                ],
                help_text="Présence d'une main courante d'escalier",
                null=True,
                verbose_name="Main courante",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="escalier_reperage",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    (True, "Oui"),
                    (False, "Non"),
                ],
                help_text="Si marches contrastées, bande d'éveil ou nez de marche contrastés, indiquez “Oui”",
                null=True,
                verbose_name="Repérage de l'escalier",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="pente",
            field=models.CharField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    ("aucune", "Aucune"),
                    ("légère", "Légère"),
                    ("importante", "Importante"),
                ],
                help_text="Présence et type de pente",
                max_length=15,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="rampe",
            field=models.CharField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    ("aucune", "Aucune"),
                    ("fixe", "Fixe"),
                    ("amovible", "Amovible"),
                ],
                help_text="Présence et type de rampe",
                max_length=20,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="reperage_vitres",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (None, "Inconnu ou sans objet"),
                    (True, "Oui"),
                    (False, "Non"),
                ],
                help_text="Présence d'un repérage sur les surfaces vitrées",
                null=True,
                verbose_name="Répérage surfaces vitrées",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="type",
            field=models.CharField(
                choices=[
                    ("int", "Cheminement intérieur"),
                    ("ext", "Cheminement extérieur"),
                ],
                default="ext",
                help_text="Type de cheminement",
                max_length=255,
                verbose_name="Type",
            ),
        ),
        migrations.RunPython(
            code=migrate_cheminement_types,
        ),
        migrations.AlterUniqueTogether(
            name="cheminement",
            unique_together={("accessibilite", "type", "nom")},
        ),
        migrations.AlterField(
            model_name="erp",
            name="numero",
            field=models.CharField(
                blank=True,
                help_text="Numéro dans la voie, incluant le complément (BIS, TER, etc.)",
                max_length=30,
                null=True,
                verbose_name="Numéro",
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="numero",
            field=models.CharField(
                blank=True,
                help_text="Numéro dans la voie, incluant le complément (BIS, TER, etc.)",
                max_length=255,
                null=True,
                verbose_name="Numéro",
            ),
        ),
        migrations.AlterField(
            model_name="activite",
            name="mots_cles",
            field=django_better_admin_arrayfield.models.fields.ArrayField(
                base_field=models.CharField(blank=True, max_length=40),
                blank=True,
                default=list,
                help_text="Liste de mots-clés apparentés à cette activité",
                null=True,
                size=None,
                verbose_name="Mots-clés",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_visibilite",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="La zone d'accueil est-elle visible depuis l'entrée ?",
                null=True,
                verbose_name="Visibilité directe de la zone d'accueil",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="aide_humaine",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence ou possibilité d'une aide humaine au déplacement",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="ascenseur",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence d'un ascenseur ou d'un élévateur",
                null=True,
                verbose_name="Ascenseur/élévateur",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_interphone",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence d'un dispositif d'appel (ex. interphone)",
                null=True,
                verbose_name="Dispositif d'appel",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_plain_pied",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="L'entrée est-elle de plain-pied ?",
                null=True,
                verbose_name="Plain-pied",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_pmr",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence d'une entrée secondaire spécifique PMR",
                null=True,
                verbose_name="Entrée spécifique PMR",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_reperage",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Présence d'éléments de répérage de l'entrée",
                null=True,
                verbose_name="Repérage de l'entrée",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="escalier_main_courante",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Présence d'une main courante d'escalier",
                null=True,
                verbose_name="Main courante",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="escalier_reperage",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Si marches contrastées, bande d'éveil ou nez de marche contrastés, indiquez “Oui”",
                null=True,
                verbose_name="Repérage de l'escalier",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="guidage_sonore",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence d'un dispositif de guidage sonore",
                null=True,
                verbose_name="Système de guidage sonore",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="reperage_vitres",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Présence d'un repérage sur les surfaces vitrées",
                null=True,
                verbose_name="Répérage surfaces vitrées",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="sanitaires_adaptes",
            field=models.PositiveSmallIntegerField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Nombre de sanitaires adaptés dans l'établissement",
                null=True,
                verbose_name="Nombre de sanitaires adaptés",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="sanitaires_presence",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence de sanitaires dans l'établissement",
                null=True,
                verbose_name="Sanitaires",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="stationnement_ext_pmr",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence de stationnements PMR à proximité (200m)",
                null=True,
                verbose_name="Stationnements PMR à proximité",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="stationnement_ext_presence",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence de stationnements à proximité (200m)",
                null=True,
                verbose_name="Stationnement à proximité",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="stationnement_pmr",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence de stationnements PMR au sein de l'ERP",
                null=True,
                verbose_name="Stationnements PMR dans l'ERP",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="stationnement_presence",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence de stationnements au sein de l'ERP",
                null=True,
                verbose_name="Stationnement dans l'ERP",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="aide_humaine",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence ou possibilité d'une aide humaine au déplacement",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="ascenseur",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence d'un ascenseur ou d'un élévateur",
                null=True,
                verbose_name="Ascenseur/élévateur",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="bande_guidage",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence d'une bande de guidage",
                null=True,
                verbose_name="Bande de guidage",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="escalier_main_courante",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Présence d'une main courante d'escalier",
                null=True,
                verbose_name="Main courante",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="escalier_reperage",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Si marches contrastées, bande d'éveil ou nez de marche contrastés, indiquez “Oui”",
                null=True,
                verbose_name="Repérage de l'escalier",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="guidage_sonore",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence d'un dispositif de guidage sonore",
                null=True,
                verbose_name="Système de guidage sonore",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="reperage_vitres",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Présence d'un repérage sur les surfaces vitrées",
                null=True,
                verbose_name="Répérage surfaces vitrées",
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="published",
            field=models.BooleanField(
                default=True,
                help_text="Statut de publication de cet ERP: si la case est décochée, l'ERP ne sera pas listé publiquement.",
                verbose_name="Publié",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_personnels",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucun", "Aucun personnel"),
                    ("formés", "Personnels sensibilisés et formés"),
                    ("non-formés", "Personnels non-formés"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Présence et type de personnel d'accueil",
                max_length=255,
                null=True,
                verbose_name="Personnel d'accueil",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="rampe",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucune", "Aucune"),
                    ("fixe", "Fixe"),
                    ("amovible", "Amovible"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Présence et type de rampe",
                max_length=20,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="sanitaires_adaptes",
            field=models.PositiveSmallIntegerField(
                blank=True,
                help_text="Nombre de sanitaires adaptés dans l'établissement",
                null=True,
                verbose_name="Nombre de sanitaires adaptés",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="devers",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucun", "Aucun"),
                    ("léger", "Léger"),
                    ("important", "Important"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Inclinaison transversale du cheminement",
                max_length=15,
                null=True,
                verbose_name="Dévers",
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="pente",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucune", "Aucune"),
                    ("légère", "Légère"),
                    ("importante", "Importante"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Présence et type de pente",
                max_length=15,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="rampe",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucune", "Aucune"),
                    ("fixe", "Fixe"),
                    ("amovible", "Amovible"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Présence et type de rampe",
                max_length=20,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_personnels",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucun", "Aucun personnel"),
                    ("formés", "Personnels sensibilisés et formés"),
                    ("non-formés", "Personnels non-formés"),
                    (None, "Inconnu"),
                ],
                help_text="Présence et type de personnel d'accueil",
                max_length=255,
                null=True,
                verbose_name="Personnel d'accueil",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="rampe",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucune", "Aucune"),
                    ("fixe", "Fixe"),
                    ("amovible", "Amovible"),
                    (None, "Inconnu"),
                ],
                help_text="Présence et type de rampe",
                max_length=20,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="rampe",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucune", "Aucune"),
                    ("fixe", "Fixe"),
                    ("amovible", "Amovible"),
                    (None, "Inconnu"),
                ],
                help_text="Présence et type de rampe",
                max_length=20,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="activite",
            name="slug",
            field=autoslug.fields.AutoSlugField(
                blank=True,
                default=None,
                editable=False,
                help_text="Identifiant d'URL (slug)",
                null=True,
                populate_from="nom",
                unique=True,
            ),
        ),
        migrations.AddField(
            model_name="cheminement",
            name="slug",
            field=autoslug.fields.AutoSlugField(
                blank=True,
                default=None,
                editable=False,
                help_text="Identifiant d'URL (slug)",
                null=True,
                populate_from="nom",
                unique=True,
            ),
        ),
        migrations.AddField(
            model_name="equipementmalentendant",
            name="slug",
            field=autoslug.fields.AutoSlugField(
                blank=True,
                default=None,
                editable=False,
                help_text="Identifiant d'URL (slug)",
                null=True,
                populate_from="nom",
                unique=True,
            ),
        ),
        migrations.AddField(
            model_name="erp",
            name="slug",
            field=autoslug.fields.AutoSlugField(
                blank=True,
                default=None,
                editable=False,
                help_text="Identifiant d'URL (slug)",
                null=True,
                populate_from="nom",
                unique=True,
            ),
        ),
        migrations.AddField(
            model_name="label",
            name="slug",
            field=autoslug.fields.AutoSlugField(
                blank=True,
                default=None,
                editable=False,
                help_text="Identifiant d'URL (slug)",
                null=True,
                populate_from="nom",
                unique=True,
            ),
        ),
        migrations.RunPython(
            code=migrate_data_forward,
            reverse_code=migrate_data_backward,
        ),
        migrations.AlterField(
            model_name="activite",
            name="slug",
            field=autoslug.fields.AutoSlugField(
                default="",
                editable=False,
                help_text="Identifiant d'URL (slug)",
                populate_from="nom",
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="cheminement",
            name="slug",
            field=autoslug.fields.AutoSlugField(
                default="",
                editable=False,
                help_text="Identifiant d'URL (slug)",
                populate_from="nom",
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="equipementmalentendant",
            name="slug",
            field=autoslug.fields.AutoSlugField(
                default="",
                editable=False,
                help_text="Identifiant d'URL (slug)",
                populate_from="nom",
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="slug",
            field=autoslug.fields.AutoSlugField(
                default="",
                editable=False,
                help_text="Identifiant d'URL (slug)",
                populate_from="nom",
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="label",
            name="slug",
            field=autoslug.fields.AutoSlugField(
                default="",
                editable=False,
                help_text="Identifiant d'URL (slug)",
                populate_from="nom",
                unique=True,
            ),
        ),
        migrations.AddIndex(
            model_name="activite",
            index=models.Index(fields=["slug"], name="erp_activit_slug_872ed6_idx"),
        ),
        migrations.AddIndex(
            model_name="equipementmalentendant",
            index=models.Index(fields=["slug"], name="erp_equipem_slug_3df33d_idx"),
        ),
        migrations.AddIndex(
            model_name="erp",
            index=models.Index(fields=["slug"], name="erp_erp_slug_c17aa1_idx"),
        ),
        migrations.AddIndex(
            model_name="erp",
            index=models.Index(fields=["commune", "activite_id"], name="erp_erp_commune_42668e_idx"),
        ),
        migrations.AddIndex(
            model_name="label",
            index=models.Index(fields=["slug"], name="erp_label_slug_54d2ad_idx"),
        ),
        migrations.AddField(
            model_name="erp",
            name="user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.RunPython(
            code=add_user,
        ),
        migrations.AlterField(
            model_name="erp",
            name="user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
                verbose_name="Créateur",
            ),
        ),
        migrations.AddIndex(
            model_name="erp",
            index=models.Index(fields=["commune"], name="erp_erp_commune_310ef8_idx"),
        ),
        migrations.RenameField(
            model_name="accessibilite",
            old_name="ascenseur",
            new_name="accueil_cheminement_ascenseur",
        ),
        migrations.RenameField(
            model_name="accessibilite",
            old_name="escalier_main_courante",
            new_name="accueil_cheminement_main_courante",
        ),
        migrations.RenameField(
            model_name="accessibilite",
            old_name="rampe",
            new_name="accueil_cheminement_rampe",
        ),
        migrations.RenameField(
            model_name="accessibilite",
            old_name="aide_humaine",
            new_name="entree_aide_humaine",
        ),
        migrations.RemoveField(
            model_name="accessibilite",
            name="entree_interphone",
        ),
        migrations.RemoveField(
            model_name="accessibilite",
            name="escalier_marches",
        ),
        migrations.RemoveField(
            model_name="accessibilite",
            name="escalier_reperage",
        ),
        migrations.RemoveField(
            model_name="accessibilite",
            name="guidage_sonore",
        ),
        migrations.RemoveField(
            model_name="accessibilite",
            name="largeur_mini",
        ),
        migrations.RemoveField(
            model_name="accessibilite",
            name="reperage_vitres",
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="accueil_cheminement_nombre_marches",
            field=models.PositiveSmallIntegerField(
                blank=True,
                help_text="Indiquez 0 s’il n’y a ni marche ni escalier",
                null=True,
                verbose_name="Nombre de marches",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="accueil_cheminement_plain_pied",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Le cheminement entre l’entrée et l’accueil est-il de plain-pied ?",
                null=True,
                verbose_name="Cheminement de plain pied",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="accueil_cheminement_reperage_marches",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Nez de marche contrasté, bande d'éveil à la vigilance en haut de l'escalier, première et dernière contremarches de l'escalier contrastées",
                null=True,
                verbose_name="Repérage des marches ou de l’escalier",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="accueil_retrecissement",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Existe-t-il un ou plusieurs rétrécissements (inférieur à 80 cm) du chemin emprunté par le public pour atteindre la zone d’accueil ?",
                null=True,
                verbose_name="Rétrécissement du cheminement",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_ascenseur",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence d'un ascenseur ou d'un élévateur",
                null=True,
                verbose_name="Ascenseur/élévateur",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_bande_guidage",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence d'une bande de guidage au sol facilitant le déplacement d'une personne aveugle ou malvoyante",
                null=True,
                verbose_name="Bande de guidage",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_devers",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucun", "Aucun"),
                    ("léger", "Léger"),
                    ("important", "Important"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Inclinaison transversale du cheminement",
                max_length=15,
                null=True,
                verbose_name="Dévers",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_main_courante",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Présence d'une main courante d'escalier",
                null=True,
                verbose_name="Main courante",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_nombre_marches",
            field=models.PositiveSmallIntegerField(
                blank=True,
                help_text="Indiquez 0 s’il n’y a ni marche ni escalier",
                null=True,
                verbose_name="Nombre de marches",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_pente",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucune", "Aucune"),
                    ("légère", "Légère"),
                    ("importante", "Importante"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Présence et type de pente",
                max_length=15,
                null=True,
                verbose_name="Pente",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_plain_pied",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Le cheminement est-il de plain-pied ou existe-t-il une rupture de niveau entraînant la présence de marches ou d'un équipement type ascenseur ?",
                null=True,
                verbose_name="Cheminement de plain-pied",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_rampe",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucune", "Aucune"),
                    ("fixe", "Fixe"),
                    ("amovible", "Amovible"),
                    (None, "Inconnu"),
                ],
                help_text="Présence et type de rampe",
                max_length=20,
                null=True,
                verbose_name="Rampe",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_reperage_marches",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Nez de marche contrasté, bande d'éveil à la vigilance en haut de l'escalier, première et dernière contremarches de l'escalier contrastées",
                null=True,
                verbose_name="Repérage des marches ou de l’escalier",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_retrecissement",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Existe-t-il un ou plusieurs rétrécissements (inférieur à 80 cm) du chemin emprunté par le public pour atteindre l'entrée ?",
                null=True,
                verbose_name="Rétrécissement du cheminement",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_ascenseur",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence d'un ascenseur ou d'un élévateur",
                null=True,
                verbose_name="Ascenseur/élévateur",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_dispositif_appel",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Existe-t-il un dispositif comme une sonnette pour permettre à quelqu'un ayant besoin de la rampe de signaler sa présence ?",
                null=True,
                verbose_name="Dispositif d'appel",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_largeur_mini",
            field=models.PositiveSmallIntegerField(
                blank=True,
                help_text="Si la largeur n’est pas précisément connue, indiquez une valeur minimum. Exemple : ma largeur se situe entre 90 et 100 cm ; indiquez 90",
                null=True,
                verbose_name="Largeur minimale",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_marches",
            field=models.PositiveSmallIntegerField(
                blank=True,
                help_text="Nombre de marches d'escalier",
                null=True,
                verbose_name="Marches d'escalier",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_marches_main_courante",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Présence d'une main courante pour franchir les marches",
                null=True,
                verbose_name="Main courante",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_marches_rampe",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucune", "Aucune"),
                    ("fixe", "Fixe"),
                    ("amovible", "Amovible"),
                    (None, "Inconnu"),
                ],
                help_text="Présence et type de rampe",
                max_length=20,
                null=True,
                verbose_name="Rampe",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_marches_reperage",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Nez de marche contrasté, bande d'éveil à la vigilance en haut de l'escalier, première et dernière contremarches de l'escalier contrastées",
                null=True,
                verbose_name="Repérage de l'escalier",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_vitree_vitrophanie",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Si l'entrée est vitrée, présence d'éléments contrastés permettant de visualiser l'entrée ?",
                null=True,
                verbose_name="Vitrophanie",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="labels_autre",
            field=models.CharField(
                blank=True,
                help_text="Si autre, précisez le nom du label",
                max_length=255,
                null=True,
                verbose_name="Autre label",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="labels_familles_handicap",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("auditif", "Auditif"),
                        ("mental", "Mental"),
                        ("moteur", "Moteur"),
                        ("visuel", "Visuel"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=list,
                help_text="Liste des familles de handicaps couverts par l'obtention de ce label",
                null=True,
                size=None,
                verbose_name="Famille(s) de handicap concernées(s)",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_equipements_malentendants",
            field=models.ManyToManyField(
                blank=True,
                help_text="L'accueil est-il équipé de produits ou prestations dédiés aux personnes sourdes ou malentendantes (boucle à induction magnétique, langue des signes françaises, solution de traduction à distance, etc)",
                to="erp.EquipementMalentendant",
                verbose_name="Équipements sourds/malentendants",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_personnels",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucun", "Aucun personnel"),
                    ("formés", "Personnels sensibilisés et formés"),
                    ("non-formés", "Personnels non-formés"),
                    (None, "Inconnu"),
                ],
                help_text="Présence et sensibilisation du personnel d'accueil",
                max_length=255,
                null=True,
                verbose_name="Personnel d'accueil",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_prestations",
            field=models.TextField(
                blank=True,
                help_text="Veuillez indiquer ici les prestations spécifiques supplémentaires proposées par l'établissement",
                max_length=1000,
                null=True,
                verbose_name="Prestations d'accueil adapté supplémentaires",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_visibilite",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="La zone d'accueil (guichet d’accueil, caisse, secrétariat, etc) est-elle visible depuis l'entrée ?",
                null=True,
                verbose_name="Visibilité directe de la zone d'accueil depuis l'entrée",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_plain_pied",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="L'entrée est-elle de plain-pied ?",
                null=True,
                verbose_name="Entrée de plain-pied",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_reperage",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="Y a-t-il des éléments de repérage de l'entrée (numéro de rue à proximité, enseigne, etc)",
                null=True,
                verbose_name="Entrée facilement repérable",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="labels",
            field=models.ManyToManyField(
                blank=True,
                help_text="Labels d'accessibilité obtenus par l'ERP",
                to="erp.Label",
                verbose_name="Labels d'accessibilité",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="stationnement_ext_pmr",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Existe-t-il une ou plusieurs places de stationnement en voirie ou en parking à proximité de l'ERP (200m) ?",
                null=True,
                verbose_name="Stationnements PMR à proximité de l'ERP",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="stationnement_ext_presence",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence de stationnements à proximité de l'ERP (200m)",
                null=True,
                verbose_name="Stationnement à proximité de l'ERP",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="stationnement_pmr",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Existe-t-il une ou plusieurs places de stationnement adaptées ?",
                null=True,
                verbose_name="Stationnements PMR dans l'ERP",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="stationnement_presence",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Existe-t-il une ou plusieurs places de stationnement au sein de la parcelle de l'ERP ?",
                null=True,
                verbose_name="Stationnement dans l'ERP",
            ),
        ),
        migrations.DeleteModel(
            name="Cheminement",
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_cheminement_rampe",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucune", "Aucune"),
                    ("fixe", "Fixe"),
                    ("amovible", "Amovible"),
                    (None, "Inconnu"),
                ],
                help_text="Présence et type de rampe",
                max_length=20,
                null=True,
                verbose_name="Rampe",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_aide_humaine",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence ou possibilité d'une aide humaine au déplacement",
                null=True,
                verbose_name="Aide humaine",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="erp",
            field=models.OneToOneField(
                blank=True,
                help_text="ERP",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="erp.erp",
                verbose_name="Établissement",
            ),
        ),
        migrations.AlterField(
            model_name="activite",
            name="mots_cles",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(blank=True, max_length=40),
                blank=True,
                default=list,
                help_text="Liste de mots-clés apparentés à cette activité",
                null=True,
                size=None,
                verbose_name="Mots-clés",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="commentaire",
            field=models.TextField(
                blank=True,
                help_text="Indiquez tout autre information qui vous semble pertinente pour décrire l’accessibilité du bâtiment",
                max_length=1000,
                null=True,
                verbose_name="Commentaire libre",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_vitree",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="La porte d'entrée est-elle vitrée ?",
                null=True,
                verbose_name="Entrée vitrée",
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="code_insee",
            field=models.CharField(
                blank=True,
                help_text="Code INSEE de la commune",
                max_length=5,
                null=True,
                verbose_name="Code INSEE",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_presence",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                help_text="L'établissement dispose-t-il d'un espace extérieur qui lui appartient ?",
                null=True,
                verbose_name="Espace extérieur",
            ),
        ),
        migrations.AddField(
            model_name="erp",
            name="contact_email",
            field=models.EmailField(
                blank=True,
                help_text="Adresse email permettant de contacter l'ERP",
                max_length=255,
                null=True,
                verbose_name="Courriel",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="transport_information",
            field=models.TextField(
                blank=True,
                help_text="Précisions complémentaires sur la desserte de l'établissement par les transports en commun (lignes, stations, arrêts)",
                max_length=1000,
                null=True,
                verbose_name="Informations transports",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="transport_station_presence",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="L'établissement est-il desservi par les transports en commun ?",
                null=True,
                verbose_name="Desserte par transports en commun",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_terrain_accidente",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Le revêtement du cheminement extérieur est-il meuble, accidenté ou non-praticable en fauteuil ?",
                null=True,
                verbose_name="Terrain meuble ou accidenté",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_balise_sonore",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                help_text="Présence d'une balise facilitant le repérage de la porte pour une personne aveugle ou malvoyante",
                null=True,
                verbose_name="Présence d'une balise sonore",
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="published",
            field=models.BooleanField(
                default=True,
                help_text="Statut de publication de cet ERP: si la case est décochée, l'ERP ne sera pas listé publiquement",
                verbose_name="Publié",
            ),
        ),
        migrations.CreateModel(
            name="Commune",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nom", models.CharField(help_text="Nom", max_length=255)),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        editable=False,
                        help_text="Identifiant d'URL (slug)",
                        populate_from=erp.models.generate_commune_slug,
                        unique_with=["departement", "nom"],
                    ),
                ),
                (
                    "departement",
                    models.CharField(
                        help_text="Codé sur deux ou trois caractères.",
                        max_length=3,
                        verbose_name="Département",
                    ),
                ),
                (
                    "code_insee",
                    models.CharField(
                        help_text="Code INSEE de la commune",
                        max_length=5,
                        verbose_name="Code INSEE",
                    ),
                ),
                (
                    "superficie",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Exprimée en hectares (ha)",
                        null=True,
                        verbose_name="Superficie",
                    ),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.PointField(
                        help_text="Coordonnées géographique du centre de la commune",
                        srid=4326,
                        verbose_name="Localisation",
                    ),
                ),
                (
                    "code_postaux",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=5),
                        default=list,
                        help_text="Liste des codes postaux de cette commune",
                        size=None,
                        verbose_name="Codes postaux",
                    ),
                ),
                (
                    "population",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Nombre d'habitants estimé",
                        null=True,
                        verbose_name="Population",
                    ),
                ),
            ],
            options={
                "ordering": ("nom",),
            },
        ),
        migrations.AddField(
            model_name="erp",
            name="commune_ext",
            field=models.ForeignKey(
                blank=True,
                help_text="La commune de cet établissement",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="erp.commune",
                verbose_name="Commune (relation)",
            ),
        ),
        migrations.RunPython(
            code=prepare_equipements_data,
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_cheminement_ascenseur",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Ascenseur/élévateur",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_cheminement_main_courante",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                null=True,
                verbose_name="Main courante",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_cheminement_nombre_marches",
            field=models.PositiveSmallIntegerField(blank=True, null=True, verbose_name="Nombre de marches"),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_cheminement_plain_pied",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                null=True,
                verbose_name="Cheminement de plain pied",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_cheminement_rampe",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucune", "Aucune"),
                    ("fixe", "Fixe"),
                    ("amovible", "Amovible"),
                    (None, "Inconnu"),
                ],
                max_length=20,
                null=True,
                verbose_name="Rampe",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_cheminement_reperage_marches",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Repérage des marches ou de l’escalier",
            ),
        ),
        migrations.RemoveField(
            model_name="accessibilite",
            name="accueil_equipements_malentendants",
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="accueil_equipements_malentendants",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("aucun", "Aucun"),
                        ("autres", "Autres"),
                        ("bim", "BIM"),
                        ("lsf", "LSF"),
                        ("scd", "Service de communication à distance"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=list,
                null=True,
                size=None,
                verbose_name="Équipement(s) sourd/malentendant",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_personnels",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucun", "Aucun personnel"),
                    ("formés", "Personnels sensibilisés et formés"),
                    ("non-formés", "Personnels non-formés"),
                    (None, "Inconnu"),
                ],
                max_length=255,
                null=True,
                verbose_name="Personnel d'accueil",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_prestations",
            field=models.TextField(
                blank=True,
                max_length=1000,
                null=True,
                verbose_name="Prestations d'accueil adapté supplémentaires",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_retrecissement",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Rétrécissement du cheminement",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_visibilite",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Visibilité directe de la zone d'accueil depuis l'entrée",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_ascenseur",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Ascenseur/élévateur",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_bande_guidage",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Bande de guidage",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_devers",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucun", "Aucun"),
                    ("léger", "Léger"),
                    ("important", "Important"),
                    (None, "Inconnu ou sans objet"),
                ],
                max_length=15,
                null=True,
                verbose_name="Dévers",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_main_courante",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                null=True,
                verbose_name="Main courante",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_nombre_marches",
            field=models.PositiveSmallIntegerField(blank=True, null=True, verbose_name="Nombre de marches"),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_pente",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucune", "Aucune"),
                    ("légère", "Légère"),
                    ("importante", "Importante"),
                    (None, "Inconnu ou sans objet"),
                ],
                max_length=15,
                null=True,
                verbose_name="Pente",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_plain_pied",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Cheminement de plain-pied",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_presence",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                null=True,
                verbose_name="Espace extérieur",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_rampe",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucune", "Aucune"),
                    ("fixe", "Fixe"),
                    ("amovible", "Amovible"),
                    (None, "Inconnu"),
                ],
                max_length=20,
                null=True,
                verbose_name="Rampe",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_reperage_marches",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Repérage des marches ou de l’escalier",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_retrecissement",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Rétrécissement du cheminement",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_terrain_accidente",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Terrain meuble ou accidenté",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="commentaire",
            field=models.TextField(blank=True, max_length=1000, null=True, verbose_name="Commentaire libre"),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_aide_humaine",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Aide humaine",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_ascenseur",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Ascenseur/élévateur",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_balise_sonore",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Présence d'une balise sonore",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_dispositif_appel",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Dispositif d'appel",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_largeur_mini",
            field=models.PositiveSmallIntegerField(blank=True, null=True, verbose_name="Largeur minimale"),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_marches",
            field=models.PositiveSmallIntegerField(blank=True, null=True, verbose_name="Marches d'escalier"),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_marches_main_courante",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                null=True,
                verbose_name="Main courante",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_marches_rampe",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucune", "Aucune"),
                    ("fixe", "Fixe"),
                    ("amovible", "Amovible"),
                    (None, "Inconnu"),
                ],
                max_length=20,
                null=True,
                verbose_name="Rampe",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_marches_reperage",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                null=True,
                verbose_name="Repérage de l'escalier",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_plain_pied",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Entrée de plain-pied",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_pmr",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Entrée spécifique PMR",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_pmr_informations",
            field=models.TextField(
                blank=True,
                max_length=500,
                null=True,
                verbose_name="Infos entrée spécifique PMR",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_reperage",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                null=True,
                verbose_name="Entrée facilement repérable",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_vitree",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Entrée vitrée",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_vitree_vitrophanie",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                null=True,
                verbose_name="Vitrophanie",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="labels",
            field=models.ManyToManyField(blank=True, to="erp.Label", verbose_name="Marques ou labels"),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="labels_autre",
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name="Autre label"),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="labels_familles_handicap",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("auditif", "Auditif"),
                        ("mental", "Mental"),
                        ("moteur", "Moteur"),
                        ("visuel", "Visuel"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=list,
                null=True,
                size=None,
                verbose_name="Famille(s) de handicap concernées(s)",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="sanitaires_adaptes",
            field=models.PositiveSmallIntegerField(blank=True, null=True, verbose_name="Nombre de sanitaires adaptés"),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="sanitaires_presence",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Sanitaires",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="stationnement_ext_pmr",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Stationnements PMR à proximité de l'ERP",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="stationnement_ext_presence",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Stationnement à proximité de l'ERP",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="stationnement_pmr",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Stationnements PMR dans l'ERP",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="stationnement_presence",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Stationnement dans l'ERP",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="transport_information",
            field=models.TextField(
                blank=True,
                max_length=1000,
                null=True,
                verbose_name="Informations transports",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="transport_station_presence",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Desserte par transports en commun",
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
                verbose_name="Utilisateur",
            ),
        ),
        migrations.RunPython(
            code=migrate_equipements_malentendant,
        ),
        migrations.DeleteModel(
            name="EquipementMalentendant",
        ),
        migrations.AddField(
            model_name="erp",
            name="source",
            field=models.CharField(
                default="access4all",
                help_text="Nom de la source de données dont est issu cet ERP",
                max_length=100,
                null=True,
                verbose_name="Source",
            ),
        ),
        migrations.AddField(
            model_name="erp",
            name="source_id",
            field=models.CharField(
                help_text="Identifiant de l'ERP dans la source initiale de données",
                max_length=255,
                null=True,
                verbose_name="Source ID",
            ),
        ),
        migrations.AddIndex(
            model_name="erp",
            index=models.Index(fields=["source", "source_id"], name="erp_erp_source_ca3d57_idx"),
        ),
        migrations.AddField(
            model_name="erp",
            name="user_type",
            field=models.CharField(
                choices=[
                    ("admin", "Administration"),
                    ("gestionnaire", "Gestionnaire"),
                    ("public", "Utilisateur public"),
                    ("system", "Système"),
                ],
                default="system",
                max_length=50,
                verbose_name="Profil de contributeur",
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
                verbose_name="Contributeur",
            ),
        ),
        migrations.AddIndex(
            model_name="erp",
            index=models.Index(fields=["user_type"], name="erp_erp_user_ty_1813ad_idx"),
        ),
        migrations.AlterField(
            model_name="erp",
            name="source",
            field=models.CharField(
                choices=[
                    ("admin", "Back-office"),
                    ("api", "API"),
                    ("public", "Application publique"),
                    ("cconforme", "cconforme"),
                ],
                default="public",
                help_text="Nom de la source de données dont est issu cet ERP",
                max_length=100,
                null=True,
                verbose_name="Source",
            ),
        ),
        migrations.RunPython(
            code=migrate_sources,
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="conformite_adap_fin",
            field=models.DateField(blank=True, null=True, verbose_name="Date de fin Ad'AP"),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="registre_url",
            field=models.URLField(blank=True, max_length=255, null=True, verbose_name="URL du registre"),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="conformite_type",
            field=models.CharField(
                blank=True,
                choices=[
                    (None, "Conformité inconnue"),
                    ("non-conforme", "L'établissement est non-conforme"),
                    (
                        "attestation",
                        "L'établissement a envoyé une attestation d’accessibilité",
                    ),
                    ("adap", "Un dossier Ad'AP a été ouvert"),
                ],
                max_length=255,
                null=True,
                verbose_name="Conformité",
            ),
        ),
        migrations.CreateModel(
            name="Vote",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.SmallIntegerField(
                        choices=[(-1, "-1"), (1, "+1")],
                        default=1,
                        verbose_name="Valeur",
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        max_length=5000,
                        null=True,
                        verbose_name="Commentaire",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Date de création"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Dernière modification"),
                ),
                (
                    "erp",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="erp.erp",
                        verbose_name="Établissemet",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="vote",
            index=models.Index(fields=["value"], name="erp_vote_value_fa7ddf_idx"),
        ),
        migrations.AddIndex(
            model_name="vote",
            index=models.Index(fields=["erp", "value"], name="erp_vote_erp_id_1853cc_idx"),
        ),
        migrations.AddIndex(
            model_name="vote",
            index=models.Index(fields=["erp", "user", "value"], name="erp_vote_erp_id_108b22_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="vote",
            unique_together={("erp", "user")},
        ),
        migrations.AddField(
            model_name="activite",
            name="icon",
            field=models.CharField(
                blank=True,
                help_text='Chemin de l\'icône <a href="http://www.sjjb.co.uk/mapicons/contactsheet" target="_blank">SSJB</a> (ex. <code>sport_motorracing</code>)',
                max_length=120,
                null=True,
                verbose_name="Icône",
            ),
        ),
        migrations.AlterField(
            model_name="vote",
            name="erp",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="erp.erp",
                verbose_name="Établissement",
            ),
        ),
        migrations.RemoveField(
            model_name="accessibilite",
            name="conformite_adap_fin",
        ),
        migrations.RemoveField(
            model_name="accessibilite",
            name="conformite_type",
        ),
        migrations.CreateModel(
            name="StatusCheck",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("active", models.BooleanField(verbose_name="Toujours en activité")),
                (
                    "last_checked",
                    models.DateTimeField(auto_now=True, verbose_name="Dernière vérification"),
                ),
                (
                    "erp",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="erp.erp",
                        verbose_name="Établissement",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vérification de statut",
                "verbose_name_plural": "Vérifications de statut",
            },
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_equipements_malentendants",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("aucun", "Aucun"),
                        ("autres", "Autres"),
                        ("bim", "Boucle à induction magnétique"),
                        ("lsf", "Langue des signes française"),
                        ("scd", "Service de communication à distance"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=list,
                null=True,
                size=None,
                verbose_name="Équipement(s) sourd/malentendant",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="conformite",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Conformité",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_reperage_marches",
            field=models.BooleanField(
                blank=True,
                choices=[
                    (True, "Oui"),
                    (False, "Non"),
                    (None, "Inconnu ou sans objet"),
                ],
                null=True,
                verbose_name="Repérage des marches ou de l’escalier",
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="source",
            field=models.CharField(
                choices=[
                    ("admin", "Back-office"),
                    ("api", "API"),
                    ("cconforme", "cconforme"),
                    ("public", "Saisie manuelle publique"),
                    ("public_erp", "API des établissements publics"),
                    ("sirene", "API Sirene INSEE"),
                ],
                default="public",
                help_text="Nom de la source de données dont est issu cet ERP",
                max_length=100,
                null=True,
                verbose_name="Source",
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="source",
            field=models.CharField(
                choices=[
                    ("admin", "Back-office"),
                    ("api", "API"),
                    ("entreprise_api", "API Entreprise (publique)"),
                    ("cconforme", "cconforme"),
                    ("public", "Saisie manuelle publique"),
                    ("public_erp", "API des établissements publics"),
                    ("sirene", "API Sirene INSEE"),
                ],
                default="public",
                help_text="Nom de la source de données dont est issu cet ERP",
                max_length=100,
                null=True,
                verbose_name="Source",
            ),
        ),
        migrations.RemoveField(
            model_name="accessibilite",
            name="labels",
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="labels",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("autre", "Autre"),
                        ("dpt", "Destination pour Tous"),
                        ("mobalib", "Mobalib"),
                        ("th", "Tourisme & Handicap"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=list,
                null=True,
                size=None,
                verbose_name="Marques ou labels",
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="source",
            field=models.CharField(
                choices=[
                    ("admin", "Back-office"),
                    ("api", "API"),
                    ("entreprise_api", "API Entreprise (publique)"),
                    ("cconforme", "cconforme"),
                    ("public", "Saisie manuelle publique"),
                    ("public_erp", "API des établissements publics"),
                    ("sirene", "API Sirene INSEE"),
                    ("tourisme-handicap", "Tourisme & Handicap"),
                ],
                default="public",
                help_text="Nom de la source de données dont est issu cet ERP",
                max_length=100,
                null=True,
                verbose_name="Source",
            ),
        ),
        migrations.DeleteModel(
            name="Label",
        ),
        migrations.AddIndex(
            model_name="commune",
            index=models.Index(fields=["nom"], name="erp_commune_nom_c8bcbd_idx"),
        ),
        migrations.AddIndex(
            model_name="commune",
            index=models.Index(fields=["slug"], name="erp_commune_slug_6414cc_idx"),
        ),
        migrations.AddIndex(
            model_name="commune",
            index=models.Index(fields=["code_insee"], name="erp_commune_code_in_72a230_idx"),
        ),
        migrations.AddIndex(
            model_name="commune",
            index=models.Index(fields=["departement"], name="erp_commune_departe_a4b660_idx"),
        ),
        migrations.AddIndex(
            model_name="commune",
            index=models.Index(fields=["nom", "departement"], name="erp_commune_nom_2d2fc5_idx"),
        ),
        migrations.AddIndex(
            model_name="commune",
            index=models.Index(fields=["nom", "code_postaux"], name="erp_commune_nom_b18548_idx"),
        ),
        migrations.AddField(
            model_name="activite",
            name="vector_icon",
            field=models.CharField(
                blank=True,
                default="building",
                help_text='Nom de l\'icône dans <a href="/mapicons" target="_blank">le catalogue</a>.',
                max_length=120,
                null=True,
                verbose_name="Icône vectorielle",
            ),
        ),
        migrations.AddField(
            model_name="statuscheck",
            name="non_diffusable",
            field=models.BooleanField(default=False, verbose_name="Données SIRENE non diffusables"),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_equipements_malentendants",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("autres", "Autres"),
                        ("bim", "Boucle à induction magnétique"),
                        ("lsf", "Langue des signes française"),
                        ("scd", "Service de communication à distance"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=list,
                null=True,
                size=None,
                verbose_name="Équipement(s) sourd/malentendant",
            ),
        ),
        migrations.RunPython(
            code=migrate_equipement_choices,
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_equipements_malentendants",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("bim", "Boucle à induction magnétique"),
                        ("lsf", "Langue des signes française"),
                        ("scd", "Service de communication à distance"),
                        ("autres", "Autres"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=list,
                null=True,
                size=None,
                verbose_name="Équipement(s) sourd/malentendant",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_equipements_malentendants",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("bim", "Boucle à induction magnétique"),
                        ("lsf", "Langue des signes française"),
                        ("scd", "Service de communication à distance"),
                        ("lpc", "Langue Française Parlée Complétée (LFPC)"),
                        ("autres", "Autres"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=list,
                null=True,
                size=None,
                verbose_name="Équipement(s) sourd/malentendant",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_personnels",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucun", "Aucun personnel"),
                    ("formés", "Personnels sensibilisés ou formés"),
                    ("non-formés", "Personnels non-formés"),
                    (None, "Inconnu"),
                ],
                max_length=255,
                null=True,
                verbose_name="Personnel d'accueil",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_equipements_malentendants",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("bim", "Boucle à induction magnétique"),
                        ("lsf", "Langue des signes française"),
                        ("lpc", "Langue Française Parlée Complétée (LFPC)"),
                        ("scd", "Service de communication à distance"),
                        ("autres", "Autres"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=list,
                null=True,
                size=None,
                verbose_name="Équipement(s) sourd/malentendant",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="accueil_equipements_malentendants_presence",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Présence d'équipement(s) sourds/malentendants",
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="source",
            field=models.CharField(
                choices=[
                    ("admin", "Back-office"),
                    ("api", "API"),
                    ("entreprise_api", "API Entreprise (publique)"),
                    ("cconforme", "cconforme"),
                    ("opendatasoft", "API OpenDataSoft"),
                    ("public", "Saisie manuelle publique"),
                    ("public_erp", "API des établissements publics"),
                    ("sirene", "API Sirene INSEE"),
                    ("tourisme-handicap", "Tourisme & Handicap"),
                ],
                default="public",
                help_text="Nom de la source de données dont est issu cet ERP",
                max_length=100,
                null=True,
                verbose_name="Source",
            ),
        ),
        migrations.AddField(
            model_name="erp",
            name="metadata",
            field=models.JSONField(default=dict),
        ),
        migrations.AddIndex(
            model_name="erp",
            index=django.contrib.postgres.indexes.GinIndex(fields=["metadata"], name="gin_metadata"),
        ),
        migrations.AlterField(
            model_name="erp",
            name="slug",
            field=autoslug.fields.AutoSlugField(
                default="",
                editable=False,
                help_text="Identifiant d'URL (slug)",
                max_length=255,
                populate_from="nom",
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="source",
            field=models.CharField(
                choices=[
                    ("admin", "Back-office"),
                    ("api", "API"),
                    ("entreprise_api", "API Entreprise (publique)"),
                    ("cconforme", "cconforme"),
                    ("opendatasoft", "API OpenDataSoft"),
                    ("public", "Saisie manuelle publique"),
                    ("public_erp", "API des établissements publics"),
                    ("sirene", "API Sirene INSEE"),
                    ("tourisme-handicap", "Tourisme & Handicap"),
                    ("centres-vaccination", "Centres de vaccination"),
                ],
                default="public",
                help_text="Nom de la source de données dont est issu cet ERP",
                max_length=100,
                null=True,
                verbose_name="Source",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_dispositif_appel_type",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("bouton", "Bouton d’appel"),
                        ("sonnette", "Sonnette"),
                        ("interphone", "Interphone"),
                        ("visiophone", "Visiophone"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=list,
                null=True,
                size=None,
                verbose_name="Dispositifs d'appel disponibles",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_devers",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucun", "Aucun"),
                    ("léger", "Léger"),
                    ("important", "Important"),
                    (None, "Inconnu"),
                ],
                max_length=15,
                null=True,
                verbose_name="Dévers",
            ),
        ),
        migrations.AddField(
            model_name="erp",
            name="contact_url",
            field=models.URLField(
                blank=True,
                help_text="Lien hypertexte permettant de contacter l'établissement (formulaire, chatbot, etc.)",
                max_length=255,
                null=True,
                verbose_name="Lien vers outil de contact",
            ),
        ),
        migrations.RunPython(
            code=migrate_prestations_to_commentaire,
        ),
        migrations.RemoveField(
            model_name="accessibilite",
            name="accueil_prestations",
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="accueil_equipements_malentendants",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("bim", "Boucle à induction magnétique fixe"),
                        ("bmp", "Boucle à induction magnétique portative"),
                        ("lsf", "Langue des signes française"),
                        ("lpc", "Langue Française Parlée Complétée (LFPC)"),
                        ("sts", "Sous-Titrage ou Transcription Simultanée"),
                        ("autres", "Autres"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=list,
                null=True,
                size=None,
                verbose_name="Équipement(s) sourd/malentendant",
            ),
        ),
        migrations.RunSQL(
            sql='update "erp_accessibilite" set "accueil_equipements_malentendants" = array_replace("accueil_equipements_malentendants", \'scd\', \'sts\')',
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="accueil_cheminement_sens_marches",
            field=models.CharField(
                blank=True,
                choices=[
                    ("montant", "Montant"),
                    ("descendant", "Descendant"),
                    (None, "Inconnu"),
                ],
                max_length=20,
                null=True,
                verbose_name="Sens de circulation de l'escalier",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_sens_marches",
            field=models.CharField(
                blank=True,
                choices=[
                    ("montant", "Montant"),
                    ("descendant", "Descendant"),
                    (None, "Inconnu"),
                ],
                max_length=20,
                null=True,
                verbose_name="Sens de circulation de l'escalier",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_marches_sens",
            field=models.CharField(
                blank=True,
                choices=[
                    ("montant", "Montant"),
                    ("descendant", "Descendant"),
                    (None, "Inconnu"),
                ],
                max_length=20,
                null=True,
                verbose_name="Sens de circulation de l'escalier",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_pente_presence",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Pente présence",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_pente_degre_difficulte",
            field=models.CharField(
                blank=True,
                choices=[
                    ("aucune", "Aucune"),
                    ("légère", "Légère"),
                    ("importante", "Importante"),
                    (None, "Inconnu"),
                ],
                max_length=15,
                null=True,
                verbose_name="Difficulté de la pente",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="cheminement_ext_pente_longueur",
            field=models.CharField(
                blank=True,
                choices=[
                    ("courte", "< 0,5m"),
                    ("moyenne", "entre 0,5 et 2m"),
                    ("longue", "> 2m"),
                    (None, "Inconnu"),
                ],
                max_length=15,
                null=True,
                verbose_name="Longueur de la pente",
            ),
        ),
        migrations.RunPython(
            code=migrate_previous_data,
        ),
        migrations.RemoveField(
            model_name="accessibilite",
            name="cheminement_ext_pente",
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_porte_manoeuvre",
            field=models.CharField(
                blank=True,
                choices=[
                    ("battante", "Porte battante"),
                    ("coulissante", "Porte coulissante"),
                    ("tourniquet", "Tourniquet"),
                    ("tambour", "Porte tambour"),
                    (None, "Inconnu"),
                ],
                max_length=255,
                null=True,
                verbose_name="Manœuvre de la porte",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_porte_presence",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Y a-t-il une porte ?",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="entree_porte_type",
            field=models.CharField(
                blank=True,
                choices=[
                    ("manuelle", "Manuelle"),
                    ("automatique", "Automatique"),
                    (None, "Inconnu ou sans objet"),
                ],
                max_length=255,
                null=True,
                verbose_name="Type de porte",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_pente_degre_difficulte",
            field=models.CharField(
                blank=True,
                choices=[
                    ("légère", "Légère"),
                    ("importante", "Importante"),
                    (None, "Inconnu"),
                ],
                max_length=15,
                null=True,
                verbose_name="Difficulté de la pente",
            ),
        ),
        migrations.RunPython(
            code=migrate_previous_data_diff,
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="cheminement_ext_pente_longueur",
            field=models.CharField(
                blank=True,
                choices=[
                    ("courte", "< 0,5 mètres"),
                    ("moyenne", "entre 0,5 et 2 mètres"),
                    ("longue", "> 2 mètres"),
                    (None, "Inconnu"),
                ],
                max_length=15,
                null=True,
                verbose_name="Longueur de la pente",
            ),
        ),
        migrations.RunPython(
            code=migrate_sonnette_to_bouton,
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_dispositif_appel_type",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("bouton", "Bouton d’appel"),
                        ("interphone", "Interphone"),
                        ("visiophone", "Visiophone"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=list,
                null=True,
                size=None,
                verbose_name="Dispositifs d'appel disponibles",
            ),
        ),
        migrations.AddField(
            model_name="erp",
            name="uuid",
            field=models.UUIDField(default=uuid.uuid4, null=True),
        ),
        migrations.RunPython(
            code=gen_uuid,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="erp",
            name="uuid",
            field=models.UUIDField(default=uuid.uuid4, unique=True),
        ),
        migrations.AlterField(
            model_name="erp",
            name="source",
            field=models.CharField(
                choices=[
                    ("admin", "Back-office"),
                    ("api", "API"),
                    ("entreprise_api", "API Entreprise (publique)"),
                    ("cconforme", "cconforme"),
                    ("opendatasoft", "API OpenDataSoft"),
                    ("public", "Saisie manuelle publique"),
                    ("public_erp", "API des établissements publics"),
                    ("sirene", "API Sirene INSEE"),
                    ("tourisme-handicap", "Tourisme & Handicap"),
                    ("centres-vaccination", "Centres de vaccination"),
                    ("gendarmerie", "Gendarmerie"),
                ],
                default="public",
                help_text="Nom de la source de données dont est issu cet ERP",
                max_length=100,
                null=True,
                verbose_name="Source",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_dispositif_appel_type",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("bouton", "Bouton d'appel"),
                        ("interphone", "Interphone"),
                        ("visiophone", "Visiophone"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=list,
                null=True,
                size=None,
                verbose_name="Dispositifs d'appel disponibles",
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="source",
            field=models.CharField(
                choices=[
                    ("admin", "Back-office"),
                    ("api", "API"),
                    ("entreprise_api", "API Entreprise (publique)"),
                    ("cconforme", "cconforme"),
                    ("gendarmerie", "Gendarmerie"),
                    ("opendatasoft", "API OpenDataSoft"),
                    ("public", "Saisie manuelle publique"),
                    ("public_erp", "API des établissements publics"),
                    ("sirene", "API Sirene INSEE"),
                    ("tourisme-handicap", "Tourisme & Handicap"),
                    ("centres-vaccination", "Centres de vaccination"),
                ],
                default="public",
                help_text="Nom de la source de données dont est issu cet ERP",
                max_length=100,
                null=True,
                verbose_name="Source",
            ),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="labels_familles_handicap",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("auditif", "Handicap auditif"),
                        ("mental", "Handicap mental"),
                        ("moteur", "Handicap moteur"),
                        ("visuel", "Handicap visuel"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=list,
                null=True,
                size=None,
                verbose_name="Famille(s) de handicap concernées(s)",
            ),
        ),
        migrations.DeleteModel(
            name="StatusCheck",
        ),
        migrations.AddField(
            model_name="commune",
            name="contour",
            field=django.contrib.gis.db.models.fields.MultiPolygonField(
                help_text="Contour de la commune",
                null=True,
                srid=4326,
                verbose_name="Contour",
            ),
        ),
        migrations.AddField(
            model_name="commune",
            name="arrondissement",
            field=models.BooleanField(
                default=False,
                help_text="Cette commune est un arrondissement (Paris, Lyon, Marseille)",
                verbose_name="Arrondissement",
            ),
        ),
        migrations.AddIndex(
            model_name="commune",
            index=models.Index(fields=["arrondissement"], name="erp_commune_arrondi_d4ff5c_idx"),
        ),
        migrations.AddField(
            model_name="commune",
            name="obsolete",
            field=models.BooleanField(
                default=False,
                help_text="La commune est obsolète, par exemple suite à un regroupement ou un rattachement",
                verbose_name="Obsolète",
            ),
        ),
        migrations.AddIndex(
            model_name="commune",
            index=models.Index(fields=["obsolete"], name="erp_commune_obsolet_cd7260_idx"),
        ),
        migrations.AddIndex(
            model_name="commune",
            index=models.Index(
                fields=["obsolete", "arrondissement"],
                name="erp_commune_obsolet_4eaeb3_idx",
            ),
        ),
        migrations.AddField(
            model_name="accessibilite",
            name="sanitaires_adaptes_booltemp",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non"), (None, "Inconnu")],
                null=True,
                verbose_name="Nombre de sanitaires adaptés",
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="source",
            field=models.CharField(
                choices=[
                    ("acceslibre", "Base de données Acceslibre"),
                    ("admin", "Back-office"),
                    ("api", "API"),
                    ("entreprise_api", "API Entreprise (publique)"),
                    ("cconforme", "cconforme"),
                    ("gendarmerie", "Gendarmerie"),
                    ("nestenn", "Nestenn"),
                    ("opendatasoft", "API OpenDataSoft"),
                    ("public", "Saisie manuelle publique"),
                    ("public_erp", "API des établissements publics"),
                    ("service_public", "Service Public"),
                    ("sirene", "API Sirene INSEE"),
                    ("tourisme-handicap", "Tourisme & Handicap"),
                    ("centres-vaccination", "Centres de vaccination"),
                ],
                default="public",
                help_text="Nom de la source de données dont est issu cet ERP",
                max_length=100,
                null=True,
                verbose_name="Source",
            ),
        ),
        migrations.RunPython(
            code=migrate_sanitaires_adaptes,
        ),
        migrations.RemoveField(
            model_name="accessibilite",
            name="sanitaires_adaptes",
        ),
        migrations.RenameField(
            model_name="accessibilite",
            old_name="sanitaires_adaptes_booltemp",
            new_name="sanitaires_adaptes",
        ),
        migrations.RenameField(
            model_name="accessibilite",
            old_name="cheminement_ext_terrain_accidente",
            new_name="cheminement_ext_terrain_stable",
        ),
        migrations.RunPython(
            code=update_erp_accueil_equipements_malentendants,
        ),
        migrations.RunPython(
            code=reset_user,
        ),
        migrations.AddField(
            model_name="activite",
            name="position",
            field=models.PositiveSmallIntegerField(default=0, verbose_name="Position dans la liste"),
        ),
        migrations.AlterField(
            model_name="accessibilite",
            name="entree_porte_presence",
            field=models.BooleanField(
                blank=True,
                choices=[(True, "Oui"), (False, "Non")],
                null=True,
                verbose_name="Y a-t-il une porte ?",
            ),
        ),
        migrations.AlterField(
            model_name="erp",
            name="source",
            field=models.CharField(
                choices=[
                    ("acceslibre", "Base de données Acceslibre"),
                    ("admin", "Back-office"),
                    ("api", "API"),
                    ("entreprise_api", "API Entreprise (publique)"),
                    ("cconforme", "cconforme"),
                    ("gendarmerie", "Gendarmerie"),
                    ("nestenn", "Nestenn"),
                    ("opendatasoft", "API OpenDataSoft"),
                    ("public", "Saisie manuelle publique"),
                    ("public_erp", "API des établissements publics"),
                    ("sap", "Sortir À Pair"),
                    ("service_public", "Service Public"),
                    ("sirene", "API Sirene INSEE"),
                    ("tourisme-handicap", "Tourisme & Handicap"),
                    ("typeform", "Questionnaires Typeform"),
                    ("centres-vaccination", "Centres de vaccination"),
                ],
                default="public",
                help_text="Nom de la source de données dont est issu cet ERP",
                max_length=100,
                null=True,
                verbose_name="Source",
            ),
        ),
        migrations.RunPython(
            code=update_activite_position,
        ),
        migrations.RunPython(
            code=add_activite_autre,
        ),
        migrations.RunPython(
            code=reorder,
        ),
    ]
