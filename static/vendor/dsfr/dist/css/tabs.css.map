{"version":3,"sources":["<no source>","../../../tabs.css","../../../../../src/tabs/main.scss","../../../../../src/links/styles/tools/_build.scss","../../../../../src/core/styles/reset/tools/_links.scss","../../../../../src/core/styles/spacing/tools/_space.scss","../../../../../src/core/styles/global/tools/_display.scss","../../../../../src/core/styles/global/misc/z-index/_tools.scss","../../../../../src/core/styles/global/misc/z-index/_settings.scss","../../../../../src/links/styles/tools/_sizes.scss","../../../../../src/core/styles/global/functions/_units.scss","../../../../../src/core/styles/global/tools/_selectors.scss","../../../../../src/links/styles/tools/_icons.scss","../../../../../src/core/styles/global/tools/_pseudo.scss","../../../../../src/tabs/styles/_module.scss","../../../../../src/core/styles/reset/tools/_lists.scss","../../../../../src/core/styles/spacing/tools/_position.scss","../../../../../src/core/styles/global/_settings.scss","../../../../../src/core/styles/global/tools/_blocks.scss","../../../../../src/core/styles/spacing/tools/_size.scss","../../../../../src/tabs/styles/_schemes.scss","../../../../../src/schemes/styles/tools/_element.scss","../../../../../src/core/styles/global/functions/_strings.scss","../../../../../src/schemes/styles/tools/_hover.scss","../../../../../src/core/styles/global/misc/disabled/_tools.scss","../../../../../src/core/styles/global/misc/breakpoints/_tools.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACAhB;;yCDGyC;;AEmEvC;ECrDA,sBAAiB;EACjB,uBAAkB;EAClB,0BAAqB;EC2DnB,SFpBe;EGlDf,oBAAoB;EAOpB,mBAAgB;EAIhB,mBAAa;ECHf,UCLO;APET;;AE+BE;EMnCA,eCkBgD;EDjBhD,mBJ0BsB;EIvBtB,kBJuBsB;EITtB,oBAAsD;ARPxD;;AURY;;ECKR,mBAAmB;EA8BnB,gBAAgB;EAChB,iBPZoB;EOapB,kBPboB;EOcpB,qBAL0C;EAM1C,sBAN0C;AXhB9C;;AYbE;;EDsCI,cAAc;EACd,qBAVwC;EAWxC,eF7B4C;ATQlD;;AUvBY;;ECKR,mBAAmB;EAOnB,iBAAiB;EACjB,eAAe;EACf,gBAAgB;AXgBpB;;AY1BE;;EDYI,qBHOwB;EGNxB,oBPOkB;EONlB,eFH4C;ATqBlD;;AazCA;ECkBE,eAAU;EACV,eAAU;EACV,aAAW;EACX,aAAW;EACX,aAAW;EACX,cAAY;EACZ,kBAAa;EXdb,sBAAiB;EACjB,uBAAkB;EAClB,0BAAqB;EYbrB,kBAAU;EFKV,gBAAgB;ETyDZ,gBSxDoB;ETwDpB,gBSvDoB;ERFtB,aAAa;EAIb,mBAAgB;EAIhB,uBAAa;EQHf;;KbsDG;EanDH,uBGd+B;EZuD3B,6BAnBmB;EAoBnB,8BApBmB;ESPvB;;Ib0CE,CakBF;;GbfC,CamCD;;GbhCC;AACH;;Aa5EA;ETqDM,cSlCiB;ETmCjB,eSnCiB;AbqEvB;;AY/EE;EAGI,WCUa;EDNb,cAAS;EGjBb,kBAAU;EAER,YAAK;EAGL,QAAO;EAGP,SAAQ;EAGR,OAAM;EFcN,oBAAoB;Ab2ExB;;AiBxFE;EZPE,aAAa;EAQb,qBAAa;EQoBb,gBAAgB;EK/Bd,WAAO;EAGP,YAAQ;EHLZ,kBAAU;EFqCR;;Kb0EC;EIvCD,cShCsB;ETgCtB,mBA1CoB;ESmBpB;;KbmEC;AACL;;AiBzGG;ELCG,WC8Be;ED1Bf,cAAS;EC2BT,cAAc;EACd,WAAW;ETSX,oBAxBkB;EAyBlB,qBAzBkB;AJgGxB;;AiBlHG;EJ0CG,cAAc;EACd,cAAc;ETiBhB,gBA1CoB;AJsGxB;;AiBxHG;EbkDG,cSHwB;Ab6E9B;;AiB5HG;ELCG,WC+CoB;ED3CpB,cAAS;EGjBb,gBAAU;EAER,SAAK;EGAH,aAAO;EAGP,WAAQ;EdyDR,oBAhCkB;AJoHxB;;AiBtIG;EbkDG,mBAhCkB;AJwHxB;;AiB1IG;ELCG,WCwDmB;EDpDnB,cAAS;ECqDL,eAAe;ETRnB,iBSS6B;EACzB,cAAc;EExEtB,gBAAU;EAER,SAAK;EGAH,WAAO;EAGP,WAAQ;EdyDR,gBSY4B;AbyFlC;;AiBvJG;ELCG,WCkEoB;ED9DpB,cAAS;EGjBb,gBAAU;EAER,SAAK;EGAH,WAAO;EAGP,WAAQ;EL4EJ,gBAAgB;ETnBpB,kBSoB8B;Ab4FpC;;AanFE;EE3FA,kBAAU;EF6FR,iBAAiB;EACjB,iBAAiB;EPpFnB,UCLO;APgLT;;Aa1FG;EAOG,eAAe;EACf,uBAAuB;AbuF7B;;AYhLE;EAGI,WCwFiB;EDpFjB,cAAS;EGjBb,kBAAU;EAER,QAAK;EAGL,UAAO;EAGP,SAAQ;EAGR,SAAM;EGTJ,WAAO;EAGP,wBAAQ;EZKZ,UCLO;APkMT;;AaxFE;EV1GA,wCAAiB;EACjB,yDAAkB;EAClB,8BAAoB;EWAlB,wBAAS;EACT,kBAAU;EACV,gBAAW;EACX,kBAAW;EACX,kBAAW;EACX,oBAAY;EACZ,cAAU;EACV,qDAAa;EDoGb,cAAc;EElHhB,kBAAU;EAWR,OAAM;EGTJ,WAAO;EAGP,YAAQ;EdmEV,aA1CoB;EAgClB,kBAhCkB;EAgClB,mBSyDyB;EAC3B,cAAc;EACd,2CG1H6B;EHoI7B;;;;;;;;;;;MbuGE;AACN;;Aa5HG;EAcG,iCAAiC;AbwHvC;;AatGY;EACN,kBAAkB;Ab+GxB;;AmBhQA;EAKE;;InBgQE,CmB/NF;;GnBkOC;AACH;;AY9PE;EQyCA,sEC8BsG;ArB2LxG;;AiBhQE;EECE;;KnBoQC;AACL;;AiBtQG;EGuCD,iCC8BsG;ArBqMxG;;AiB1QG;EGuCD,iCC8BsG;ArByMxG;;AiB9QG;EGuCD,iCC8BsG;ArB6MxG;;AiBlRG;EGuCD,iCC8BsG;ArBiNxG;;AmB1PG;ECWD,mCC8BsG;ED9BtG,kBC8BsG;ED9BtG,iCC8BsG;ArBuNxG;;AoB9QM;EEbF,uCAAyB;EACzB,wCAA2B;AtBwS/B;;AoB5RM;;EEbF,uCAAyB;EACzB,wCAA2B;AtB8S/B;;AoBlSM;;EEbF,oCAAyB;EACzB,wCAA2B;AtBoT/B;;AoBtRM;EE/BF,oCAAyB;EACzB,wCAA2B;AtByT/B;;AuB/SE;;EH2BA,uBC8BsG;ED9BtG,6BC8BsG;ArB2PxG;;AmBpSG;ECWD,6CC8BsG;ED9BtG,gCC8BsG;ED9BtG,mBC8BsG;ArBiQxG;;AsBpSI;;;;EAEE,sBAAsB;AtBsS5B;;AY5UE;EQyCA,yDC8BsG;ArByQxG;;AwB9UI;EXXJ;ITqDM,cSrCe;ITsCf,eStCe;EbkEnB;;Ea4BA;ITvCE,aA1CoB;EJkNtB;;EajIC;IAgBK,iCAAiC;Eb2HvC;AAtKF;;AsB3DE;EAOI;;IACE,+EAA+E;EtB4QrF;;EsBzQI;;IACE,iFAAiF;EtB2QvF;AACF","file":"tabs.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  TABS\n\\* ------------------------------------ */\n.fr-tabs__tab {\n  --link-underline: none;\n  --link-blank-font: none;\n  --link-blank-content: none;\n  margin: 0;\n  display: inline-flex;\n  flex-direction: row;\n  align-items: center;\n  z-index: 1;\n}\n\n.fr-tabs__tab {\n  font-size: 1rem;\n  line-height: 1.5rem;\n  min-height: 2.5rem;\n  padding: 0.5rem 1rem;\n}\n\n.fr-tabs__tab:not([class*=\"fr-tabs__tab--icon-\"])[class^=\"fr-fi-\"], .fr-tabs__tab:not([class*=\"fr-tabs__tab--icon-\"])[class*=\" fr-fi-\"] {\n  flex-direction: row;\n  overflow: hidden;\n  max-width: 2.5rem;\n  max-height: 2.5rem;\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n\n.fr-tabs__tab:not([class*=\"fr-tabs__tab--icon-\"])[class^=\"fr-fi-\"]::before, .fr-tabs__tab:not([class*=\"fr-tabs__tab--icon-\"])[class*=\" fr-fi-\"]::before {\n  margin-left: 0;\n  margin-right: 0.75rem;\n  font-size: 1rem;\n}\n\n.fr-tabs__tab--icon-left[class^=\"fr-fi-\"], .fr-tabs__tab--icon-left[class*=\" fr-fi-\"] {\n  flex-direction: row;\n  overflow: initial;\n  max-width: none;\n  max-height: none;\n}\n\n.fr-tabs__tab--icon-left[class^=\"fr-fi-\"]::before, .fr-tabs__tab--icon-left[class*=\" fr-fi-\"]::before {\n  margin-left: -0.25rem;\n  margin-right: 0.5rem;\n  font-size: 1rem;\n}\n\n.fr-tabs {\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n  --link-underline: none;\n  --link-blank-font: none;\n  --link-blank-content: none;\n  position: relative;\n  overflow: hidden;\n  margin-top: -4px;\n  padding-top: 4px;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  /**\n    * Animation de la hauteur du panel\n    */\n  transition: height 0.3s;\n  margin-left: calc(50% - 50vw);\n  margin-right: calc(50% - 50vw);\n  /**\n   * ul : element srollable des boutons\n   */\n  /**\n  * Tab button\n  */\n  /**\n  * Tab Panel\n  */\n}\n\n@media (min-width: 48em) {\n  .fr-tabs {\n    margin-left: 0;\n    margin-right: 0;\n  }\n}\n\n.fr-tabs .fr-tabs {\n  margin-left: 0;\n  margin-right: 0;\n}\n\n.fr-tabs::after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: 2.75rem;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  pointer-events: none;\n}\n\n.fr-tabs__list {\n  display: flex;\n  align-items: flex-end;\n  overflow-x: auto;\n  width: 100%;\n  height: 3rem;\n  position: absolute;\n  /**\n    * overflow vertical de 4px pour le focus\n    */\n  margin: -4px 0;\n  padding: 4px 0.5rem;\n  /**\n    * Reset du style par défaut du li\n    */\n}\n\n.fr-tabs__list::after {\n  content: \"\";\n  display: block;\n  flex: 1 1 auto;\n  height: 1px;\n  margin-left: -0.5rem;\n  margin-right: -0.5rem;\n}\n\n.fr-tabs__list > li {\n  display: block;\n  flex: 0 0 auto;\n  margin: 0 0.5rem;\n}\n\n.fr-tabs__list > li:not(:first-child) {\n  margin-left: 0;\n}\n\n.fr-tabs__list > li:not(:first-child)::before {\n  content: \"\";\n  display: block;\n  position: sticky;\n  top: 100%;\n  width: 0.5rem;\n  height: 1px;\n  margin-left: -0.5rem;\n}\n\n.fr-tabs__list > li:last-child {\n  padding-right: 1rem;\n}\n\n.fr-tabs__list > li:last-child::after {\n  content: \"\";\n  display: block;\n  min-width: 1rem;\n  margin-left: 100%;\n  flex: 1 1 auto;\n  position: sticky;\n  top: 100%;\n  width: auto;\n  height: 1px;\n  margin-top: -1px;\n}\n\n.fr-tabs__list > li:first-child::before {\n  content: \"\";\n  display: block;\n  position: sticky;\n  top: 100%;\n  width: 100%;\n  height: 1px;\n  position: sticky;\n  margin-left: -100%;\n}\n\n.fr-tabs__tab {\n  position: relative;\n  overflow: visible;\n  font-weight: bold;\n  z-index: 1;\n}\n\n.fr-tabs__tab[aria-selected=true] {\n  cursor: default;\n  background: transparent;\n}\n\n.fr-tabs__tab[aria-selected=true]::after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: 2px;\n  right: 1px;\n  bottom: 0;\n  left: 1px;\n  width: auto;\n  height: calc(100% - 1px);\n  z-index: 1;\n}\n\n.fr-tabs__panel {\n  --link-underline: 0 1px 0 0 currentColor;\n  --link-blank-font: normal normal normal 1rem/1 dsfr-icons;\n  --link-blank-content: \"\\00a0\";\n  --ul-type: \"●\\00a0\\00a0\";\n  --ol-type: decimal;\n  --ul-start: 1rem;\n  --ol-start: 1.5rem;\n  --xl-block: 0.5rem;\n  --li-bottom: 0.25rem;\n  --xl-base: 1em;\n  --ol-content: counters(li-counter, \".\") \".\\00a0\\00a0\";\n  display: block;\n  position: relative;\n  left: 0;\n  width: 100%;\n  height: auto;\n  padding: 1rem;\n  margin-top: 2.5rem;\n  margin-right: -100%;\n  flex: 0 0 100%;\n  transition: visibility 0.3s, transform 0.3s;\n  /**\n    * Les éléments non sélectionnés sont cachés et rendus innaccessibles au focus\n    * Point d'attention : visibility hidden sur le panel et surcharge sur l'élément selected avec visibility visible créé des problèmes dans la gestion du focus en cas d'imbrication d'onglets\n    *\n    * tabs\n    * └─ panel selected\n    * └─ panel (visibility hidden, tabindex -1)\n    *    └─ tabs\n    *       └─ panel selected (visibility visible tabindex 0)\n    *            ↑ ce panel est accessible alors que caché par son panel parent\n    * solution : visibility hidden seulement sur les éléments non sélectionnés\n    **/\n}\n\n@media (min-width: 48em) {\n  .fr-tabs__panel {\n    padding: 2rem;\n  }\n}\n\n.fr-tabs__panel:focus, .fr-tabs__panel:focus-visible {\n  outline-offset: calc(-1rem + 2px);\n}\n\n@media (min-width: 48em) {\n  .fr-tabs__panel:focus, .fr-tabs__panel:focus-visible {\n    outline-offset: calc(-2rem + 2px);\n  }\n}\n\n.fr-tabs__panel:not(.fr-tabs__panel--selected) {\n  visibility: hidden;\n}\n\n.fr-tabs {\n  /**\n   * ul : element srollable des boutons\n   */\n  /**\n  * Tab button\n  */\n}\n\n.fr-tabs::after {\n  box-shadow: inset 1px -1px 0 0 var(--g300), inset -1px 0 0 var(--g300);\n}\n\n.fr-tabs__list {\n  /**\n    * Reset du style par défaut du li\n    */\n}\n\n.fr-tabs__list::after {\n  box-shadow: 0 1px 0 0 var(--g300);\n}\n\n.fr-tabs__list > li:not(:first-child)::before {\n  box-shadow: 0 1px 0 0 var(--g300);\n}\n\n.fr-tabs__list > li:last-child::after {\n  box-shadow: 0 1px 0 0 var(--g300);\n}\n\n.fr-tabs__list > li:first-child::before {\n  box-shadow: 0 1px 0 0 var(--g300);\n}\n\n.fr-tabs__tab:not([aria-selected=true]) {\n  background-color: var(--bf100-g750);\n  color: var(--g700);\n  box-shadow: 0 1px 0 0 var(--g300);\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .fr-tabs__tab:not([aria-selected=true]):not(a):not(:disabled):hover, a.fr-tabs__tab:not([aria-selected=true])[href]:hover {\n    background-image: linear-gradient(0deg, var(--color-hover), var(--color-hover));\n  }\n  .fr-tabs__tab:not([aria-selected=true]):not(a):not(:disabled):active, a.fr-tabs__tab:not([aria-selected=true])[href]:active {\n    background-image: linear-gradient(0deg, var(--color-active), var(--color-active));\n  }\n}\n\n:root:not([data-fr-theme=\"dark\"]) .fr-tabs__tab:not([aria-selected=true]) {\n  --color-hover: rgba(182, 182, 255, 0.5);\n  --color-active: rgba(119, 119, 255, 0.5);\n}\n\n:root:not([data-fr-theme=\"dark\"]) [class*=\"fr-scheme-light\"] .fr-tabs__tab:not([aria-selected=true]),\n:root:not([data-fr-theme=\"dark\"]) [class*=\"--scheme-light-\"] .fr-tabs__tab:not([aria-selected=true]) {\n  --color-hover: rgba(182, 182, 255, 0.5);\n  --color-active: rgba(119, 119, 255, 0.5);\n}\n\n:root:not([data-fr-theme=\"dark\"]) [class*=\"fr-scheme-dark\"] .fr-tabs__tab:not([aria-selected=true]),\n:root:not([data-fr-theme=\"dark\"]) [class*=\"--scheme-dark-\"] .fr-tabs__tab:not([aria-selected=true]) {\n  --color-hover: rgba(79, 79, 79, 0.5);\n  --color-active: rgba(115, 115, 115, 0.5);\n}\n\n:root[data-fr-theme=\"dark\"] .fr-tabs__tab:not([aria-selected=true]) {\n  --color-hover: rgba(79, 79, 79, 0.5);\n  --color-active: rgba(115, 115, 115, 0.5);\n}\n\n.fr-tabs__tab:not([aria-selected=true])[disabled], .fr-tabs__tab:not([aria-selected=true]):disabled {\n  color: var(--g600-g400);\n  background-color: var(--g200);\n}\n\n.fr-tabs__tab[aria-selected=true] {\n  box-shadow: inset 0 0.125rem 0 0 var(--bf500);\n  background-color: var(--t-plain);\n  color: var(--bf500);\n}\n\n.fr-tabs__tab[aria-selected=true]:hover:not([disabled]), .fr-tabs__tab[aria-selected=true]:hover:not(:disabled), .fr-tabs__tab[aria-selected=true]:active:not([disabled]), .fr-tabs__tab[aria-selected=true]:active:not(:disabled) {\n  background-image: none;\n}\n\n.fr-tabs__tab[aria-selected=true]::after {\n  box-shadow: -1px 0 0 0 var(--g300), 1px 0 0 0 var(--g300);\n}\n","/* ------------------------------------ *\\\n  TABS\n\\* ------------------------------------ */\n\n@import './index';\n@import 'styles/module';\n@import 'styles/schemes';\n","////\n/// Links Tools : build\n/// @group links\n////\n\n@function _sort-sizes($sizes) {\n  $sorted-map: (\n    md: map_get($sizes, md)\n  );\n\n  @each $size, $size-settings in $sizes {\n    @if $size != md {\n      $sorted-map: map-merge($sorted-map, ($size: $size-settings));\n    }\n  }\n\n  @return $sorted-map;\n}\n\n@mixin _link-class($base, $size: md, $place: null, $align-on-content: false) {\n  $selector: '';\n\n  @if $size != md {\n    $selector: '#{$base}--#{$size}';\n  }\n\n  @if $align-on-content {\n    $selector: '#{$selector}#{$base}--align-on-content';\n  }\n\n  @if $place == only {\n    @if $selector == '' {\n      $selector: '#{$base}';\n    }\n    $selector: '#{$selector}:not([class*=\"#{str-slice(quote($base), 2)}--icon-\"])';\n  }\n  @else if $place == left or $place == right {\n    $selector: '#{$selector}#{$base}--icon-#{$place}';\n  }\n\n  @if $selector == '' {\n    $selector: $base;\n  }\n\n  #{$selector} {\n    @if $place != null {\n      @include has-icon {\n        @content;\n      }\n    }\n    @else {\n      @content;\n    }\n  }\n}\n\n@mixin _build-link-base {\n  @include disable-link-style;\n  @include margin(0);\n  @include display-flex(row, center, null, null, true);\n  @include z-index(over);\n}\n\n@mixin _build-link($settings) {\n  $places: map_get($settings, places);\n  $sizes: _sort-sizes(map_get($settings, sizes));\n  $border-radius: map-get($settings, border-radius);\n  $align-on-content: map-get($settings, align-on-content);\n  $base: ns(map-get($settings, selector));\n\n  #{$base} {\n    @include _build-link-base;\n  }\n\n  @each $size, $size-settings in $sizes {\n    @include _link-class($base, $size) {\n      @include _build-link-size($size-settings, $border-radius);\n    }\n\n    @if $align-on-content {\n      @include _link-class($base, $size, null, true) {\n        @include _link-align-on-content($size, null, $size-settings);\n      }\n    }\n\n    @if $places != null {\n      @each $place in $places {\n        @include _link-class($base, $size, $place) {\n          @include _build-link-icon($size-settings, $place, $size, $size == md, $place == right);\n        }\n\n        @if $align-on-content {\n          @include _link-class($base, $size, $place, true) {\n            @include _link-align-on-content($size, $place, $size-settings);\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin build-link() {\n  @include _build-link($links-settings);\n}\n","////\n/// Core Tools : Reset\n/// @group core\n////\n\n@mixin a-reset {\n  text-decoration: none;\n  color: inherit;\n}\n\n@mixin enable-link-style() {\n  --link-underline: 0 1px 0 0 currentColor;\n  --link-blank-font: #{font-icon(sm)};\n  --link-blank-content: \"\\00a0#{icon-glyph(external-link-line)}\";\n}\n\n@mixin disable-link-style() {\n  --link-underline: none;\n  --link-blank-font: none;\n  --link-blank-content: none;\n}\n\n@mixin link-underline() {\n  box-shadow: var(--link-underline);\n}\n\n@mixin link-blank() {\n  @include after(var(--link-blank-content)) {\n    font: var(--link-blank-font);\n  }\n}\n\n@mixin enlarge-link {\n  outline-width: 0 !important;\n  @include before('', block) {\n    @include absolute(0, 0, 0, 0, 100%, 100%);\n    outline-offset: 2px;\n    outline-style: inherit;\n    outline-color: inherit;\n    outline-width: 2px;\n    @include z-index(over);\n  }\n}\n","////\n/// Core Tools : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  $v: quote($value);\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return unquote($value);\n}\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n\n  @if $direction != null {\n    $v: space($value);\n\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    $spaces: ();\n\n    @each $v in $value {\n      $spaces: append($spaces, space($v));\n    }\n\n    #{$property}: $spaces;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tools : Global display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n","////\n/// Core Tools : Global z-index\n/// @group core\n////\n\n/// Fonction de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@function z-index($index-name) {\n  @return map-get($z-indexes, $index-name);\n}\n\n/// Mixin de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@mixin z-index($index-name, $focus: false) {\n  z-index: z-index($index-name);\n  @if $focus {\n    $focus-z-index: z-index($index-name + '-focus');\n\n    @if $focus-z-index != null {\n      *:focus,\n      *:focus-visible {\n        z-index: #{$focus-z-index};\n      }\n    }\n  }\n}\n","////\n/// Core Settings : z-index\n/// @group core\n////\n\n/// Liste des z-index présent dans le DS\n/// @type map\n$z-indexes: (\n  auto: auto,\n  under: -1,\n  base: 0,\n  over: 1,\n  focus: 2000,\n  menu: 2500,\n  menu-focus: 3000,\n  nav: 3500,\n  nav-focus: 4000,\n  consent: 4500,\n  consent-focus: 5000,\n  modal: 5500,\n  modal-focus: 6000,\n  modal-footer: 6500,\n);\n","////\n/// Links Tools : sizes\n/// @group links\n////\n\n@mixin _build-link-size($size-settings, $border-radius: false) {\n  $font-size: map_get($size-settings, font-size);\n  $style: get-text-style($font-size);\n  $line-height: space(map_get($style, line-height));\n  font-size: px-rem($font-size);\n  line-height: $line-height;\n\n  $min-height: space(map_get($size-settings, min-height));\n  min-height: $min-height;\n\n  $max-icon-height: icon-size(md);\n\n  @if map_has_key($size-settings, icon-only) {\n    $max-icon-height: icon-size(map_get($size-settings, icon-only));\n  }\n  @else if map_has_key($size-settings, icon) {\n    $max-icon-height: icon-size(map_get($size-settings, icon));\n  }\n\n  $space-y: max($line-height, $max-icon-height);\n  $padding-x: space(map_get($size-settings, padding-x));\n\n  padding: #{($min-height - $space-y) / 2} #{$padding-x};\n\n  @if $border-radius {\n    border-radius: #{$min-height / 2};\n  }\n}\n\n@function _link-icon-margin($size) {\n  @return icon-size($size) / 4;\n}\n\n@mixin _link-align-on-content($size, $place, $size-settings) {\n  $padding-x: space(map_get($size-settings, padding-x));\n  $icon-margin: _link-icon-margin(map_get($size-settings, icon));\n\n  @if $place == null {\n    margin-left: -($padding-x);\n    margin-right: -($padding-x);\n  }\n  @else if $place == left {\n    margin-left: -($padding-x - $icon-margin);\n    margin-right: -($padding-x);\n  }\n  @else if $place == right {\n    margin-left: -($padding-x);\n    margin-right: -($padding-x - $icon-margin);\n  }\n  @else if $place == only {\n    $icon-size: icon-size(map_get($size-settings, icon-only));\n    $min-height: space(map_get($size-settings, min-height));\n    $padding-x: ($min-height - $icon-size) / 2;\n\n    margin-left: -($padding-x);\n    margin-right: -($padding-x);\n  }\n}\n","////\n/// Core Tools : Global units\n/// @group core\n////\n\n/// Retourne la valeur numérique sans unité.\n/// @access public\n/// @param {String} $value - la valeur avec unité\n/// @example\n///   clean-unit(12px);\n@function clean-unit($value) {\n  @if $value == null {\n    @return null;\n  }\n  @return ($value / ($value * 0 + 1));\n}\n\n/// Return rem from px\n///\n/// @param {String} $px - Font size in pixels\n/// @param {String} $root-font-size [$base-font-size-px] - Pixel font size for conversion\n///\n/// @example scss - Get 1rem conversion from 16px, using $base-font-size-px\n///   .foo {\n///     font-size: px-rem(12px);\n///   }\n@function px-rem($px, $root-font-size: 16px) {\n  @return clean-unit($px / $root-font-size) * 1rem;\n}\n\n@function is-unit($value, $unit) {\n  $v: to-lower-case(quote($value));\n  $u: quote($unit);\n  @return str-index($v, $u) == (str-length($v) - str-length($u) + 1);\n}\n\n@function is-basic-unit($value) {\n  $units: em ex '%' px cm mm in pt pc ch rem vw vh vmin vmax;\n  @each $unit in $units {\n    @if is-unit($value, $unit) {\n      @return true;\n    }\n  }\n  @return false;\n}\n","////\n/// Core Tools : Global selectors\n/// @group core\n////\n\n@mixin _class-pattern($selector, $unify: true) {\n  @if & == null {\n    @at-root #{$selector} {\n      @content;\n    }\n  }\n  @else if $unify {\n    @at-root #{selector-unify(&, $selector)} {\n      @content;\n    }\n  }\n  @else {\n    #{$selector} {\n      @content;\n    }\n  }\n}\n\n@mixin class-contains($unify: true, $patterns...) {\n\n  @if length($patterns) == 1 and length(nth($patterns, 1)) > 1 {\n    $patterns: nth($patterns, 1);\n  }\n\n  $selectors: '';\n\n  @each $pattern in $patterns {\n    $selectors: '#{$selectors}[class*=\"#{$pattern}\"]';\n  }\n\n  @include _class-pattern($selectors, $unify) {\n    @content;\n  }\n}\n\n@mixin class-not-contains($unify: true, $patterns...) {\n\n  @if length($patterns) == 1 and length(nth($patterns, 1)) > 1 {\n    $patterns: nth($patterns, 1);\n  }\n\n  $selectors: '';\n  @each $pattern in $patterns {\n    $selectors: '#{$selectors}:not([class*=\"#{$pattern}\"])';\n  }\n\n  @include _class-pattern($selectors, $unify) {\n    @content;\n  }\n}\n\n@mixin class-start-with($start, $unify: true) {\n  @include _class-pattern(class-start-with($start), $unify) {\n    @content;\n  }\n}\n\n@mixin class-not-start-with($start, $unify: true) {\n  @include _class-pattern(class-not-start-with($start), $unify) {\n    @content;\n  }\n}\n\n@mixin class-end-with($end, $unify: true) {\n  @include _class-pattern(class-end-with($end), $unify) {\n    @content;\n  }\n}\n\n@mixin class-not-end-with($end, $unify: true) {\n  @include _class-pattern(class-not-end-with($end), $unify) {\n    @content;\n  }\n}\n\n@mixin class-is-ns($unify: true) {\n  @include class-start-with(ns('', ''), $unify) {\n    @content;\n  }\n}\n\n@mixin class-is-not-ns($unify: true) {\n  @include class-not-start-with(ns('', ''), $unify) {\n    @content;\n  }\n}\n\n@mixin has-icon() {\n  @include class-start-with(ns(fi-, '')) {\n    @content;\n  }\n}\n\n@mixin has-not-icon() {\n  @include class-not-start-with(ns(fi-, '')) {\n    @content;\n  }\n}\n\n/// Sélecteur de toutes les éléments avec une classe du design system ainsi que leur noeuds enfants\n/// @access public\n@mixin all-ns-elements-selector() {\n  @include class-start-with(ns('', ''), false) {\n    @at-root {\n      &,\n      & * {\n        @at-root {\n          &,\n          &::before,\n          &::after {\n            @content;\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin specify($tags...) {\n  $selectors: (&);\n\n  @each $tag in $tags {\n    $selectors: append($selectors, selector-unify(&, $tag));\n  }\n  @at-root {\n    #{$selectors} {\n      @content;\n    }\n  }\n}\n\n@mixin nest($selector: null) {\n  @if $selector {\n    #{$selector} {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Links Tools : icons\n/// @group links\n////\n\n@mixin _build-link-icon($size-settings, $place, $size:md, $font-icon: false, $reverse: false) {\n\n  $icon-size: icon-size(map_get($size-settings, icon));\n\n  @if $place == only {\n    $icon-size: icon-size(map_get($size-settings, icon-only));\n  }\n\n  @if $reverse {\n    flex-direction: row-reverse;\n  }\n  @else {\n    flex-direction: row;\n  }\n\n  $icon-margin: _link-icon-margin(map_get($size-settings, icon));\n  $icon-margin-x: space(map_get($size-settings, icon-margin-x));\n\n  @if $place == left {\n    overflow: initial;\n    max-width: none;\n    max-height: none;\n    @include before {\n      margin-left: -($icon-margin);\n      margin-right: $icon-margin-x;\n      font-size: $icon-size;\n    }\n  }\n  @else if $place == right {\n    overflow: initial;\n    max-width: none;\n    max-height: none;\n    @include before {\n      margin-right: -($icon-margin);\n      margin-left: $icon-margin-x;\n      font-size: $icon-size;\n    }\n  }\n  @else if $place == only {\n    $min-height: space(map_get($size-settings, min-height));\n    $padding-x: ($min-height - $icon-size) / 2;\n\n    overflow: hidden;\n    max-width: $min-height;\n    max-height: $min-height;\n    padding-left: $padding-x;\n    padding-right: $padding-x;\n\n    @include before {\n      margin-left: 0;\n      margin-right: $padding-x;\n      font-size: $icon-size;\n    }\n  }\n}\n","////\n/// Core Tools : Global pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Tabs Module\n/// @group tabs\n////\n\n@include build-tab();\n\n#{ns(tabs)} {\n  @include disable-list-style;\n  @include disable-link-style;\n  @include relative;\n  overflow: hidden;\n  @include margin-top(-4px);\n  @include padding-top(4px);\n  @include display-flex(row, flex-start);\n\n  /**\n    * Animation de la hauteur du panel\n    */\n  transition: height $tabs-transition-duration;\n\n  // retire le padding du container en mobile\n  @include margin-x(calc(50% - 50vw));\n  @include margin-x(0, md);\n\n  #{ns(tabs)} {\n    @include margin-x(0);\n  }\n\n  @include after('', block) {\n    @include absolute(11v, 0, 0, 0);\n    pointer-events: none;\n  }\n\n  /**\n   * ul : element srollable des boutons\n   */\n  @include list {\n    @include display-flex(null, flex-end);\n    overflow-x: auto;\n    @include size(100%, 12v);\n    @include absolute;\n\n    /**\n    * overflow vertical de 4px pour le focus\n    */\n    @include margin(-4px 0);\n    @include padding(4px 2v);\n\n    @include after('', block) {\n      flex: 1 1 auto;\n      height: 1px;\n      @include margin-x(-2v);\n    }\n\n    /**\n    * Reset du style par défaut du li\n    */\n    // TODO: BEM, pour éviter de styliser les li du content\n    > li {\n      display: block;\n      flex: 0 0 auto;\n      @include margin(0 2v);\n\n      &:not(:first-child) {\n        @include margin-left(0);\n        @include before('', block) {\n          @include sticky(100%, null, null, null, 2v, 1px);\n          @include margin-left(-2v);\n        }\n      }\n\n      &:last-child {\n        @include padding-right(4v);\n\n        @include after('', block) {\n          min-width: 1rem;\n          @include margin-left(100%);\n          flex: 1 1 auto;\n          @include sticky(100%, null, null, null, auto, 1px);\n          @include margin-top(-1px);\n        }\n      }\n\n      &:first-child {\n        @include before('', block) {\n          @include sticky(100%, null, null, null, 100%, 1px);\n          position: sticky;\n          @include margin-left(-100%);\n        }\n      }\n    }\n  }\n\n  /**\n  * Tab button\n  */\n  &__tab {\n    @include relative;\n    overflow: visible;\n    font-weight: bold;\n    @include z-index(over);\n\n    &[aria-selected=true] {\n      cursor: default;\n      background: transparent;\n\n      @include after('', block) {\n        @include absolute(2px, 1px, 0, 1px, auto, calc(100% - 1px));\n        @include z-index(over);\n      }\n    }\n  }\n\n  /**\n  * Tab Panel\n  */\n  &__panel {\n    @include enable-link-style;\n    @include enable-list-style;\n    display: block;\n    @include relative(null, null, null, 0, 100%, auto);\n    @include padding(4v);\n    @include padding(8v, md);\n    @include margin-top(10v);\n    @include margin-right(-100%);\n    flex: 0 0 100%;\n    transition: visibility $tabs-transition-duration, transform $tabs-transition-duration;\n\n    &:focus,\n    &:focus-visible {\n      outline-offset: calc(-1rem + 2px);\n      @include respond-from(md) {\n        outline-offset: calc(-2rem + 2px);\n      }\n    }\n\n    /**\n    * Les éléments non sélectionnés sont cachés et rendus innaccessibles au focus\n    * Point d'attention : visibility hidden sur le panel et surcharge sur l'élément selected avec visibility visible créé des problèmes dans la gestion du focus en cas d'imbrication d'onglets\n    *\n    * tabs\n    * └─ panel selected\n    * └─ panel (visibility hidden, tabindex -1)\n    *    └─ tabs\n    *       └─ panel selected (visibility visible tabindex 0)\n    *            ↑ ce panel est accessible alors que caché par son panel parent\n    * solution : visibility hidden seulement sur les éléments non sélectionnés\n    **/\n    @at-root #{&}:not(&--selected) {\n      visibility: hidden;\n    }\n  }\n}\n","////\n/// Core Tools : Reset list\n/// @group core\n////\n\n@mixin enable-list-style() {\n  $selector: null;\n\n  @if & == null {\n    $selector: ':root';\n  }\n\n  @include nest($selector) {\n    --ul-type: \"●\\00a0\\00a0\";\n    --ol-type: decimal;\n    --ul-start: #{space(4v)};\n    --ol-start: #{space(6v)};\n    --xl-block: #{space(2v)};\n    --li-bottom: #{space(1v)};\n    --xl-base: 1em;\n    --ol-content: counters(li-counter, \".\") \".\\00a0\\00a0\";\n  }\n}\n\n@mixin disable-list-style() {\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n}\n","////\n/// Core Tools : Global position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n","////\n/// Core Settings : Global\n/// @group core\n////\n\n$global-transition-duration: 0.3s;\n\n@import 'misc/settings';\n","////\n/// Core Tools : Global list\n/// @group core\n////\n\n@mixin title() {\n  &__title {\n    @content;\n  }\n}\n\n@mixin body() {\n  &__body {\n    @content;\n  }\n}\n\n@mixin list() {\n  &__list {\n    @content;\n  }\n}\n\n@mixin list-item() {\n  &__item {\n    @content;\n  }\n}\n","////\n/// Core Tools : Global size\n/// @group core\n////\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Tabs Schemes\n/// @group tabs\n////\n\n#{ns(tabs)} {\n  @include after {\n    @include scheme-element-box-shadow-color(g300, true, 'inset 1px -1px 0 0 $COLOR, inset -1px 0 0 $COLOR');\n  }\n\n  /**\n   * ul : element srollable des boutons\n   */\n  @include list {\n\n    @include after {\n      @include scheme-element-box-shadow-color(g300, true, '0 1px 0 0 $COLOR');\n    }\n\n    /**\n    * Reset du style par défaut du li\n    */\n    > li {\n      &:not(:first-child) {\n        @include before {\n          @include scheme-element-box-shadow-color(g300, true, '0 1px 0 0 $COLOR');\n        }\n      }\n\n      &:last-child {\n        @include after {\n          @include scheme-element-box-shadow-color(g300, true, '0 1px 0 0 $COLOR');\n        }\n      }\n\n      &:first-child {\n        @include before {\n          @include scheme-element-box-shadow-color(g300, true, '0 1px 0 0 $COLOR');\n        }\n      }\n    }\n  }\n\n  /**\n  * Tab button\n  */\n  &__tab {\n    &:not([aria-selected=true]) {\n      @include scheme-element-bg-color(bf100-g750, true, true);\n      @include scheme-element-text-color(g700);\n      @include disabled(g600, g300);\n      @include scheme-element-box-shadow-color(g300, true, '0 1px 0 0 $COLOR');\n    }\n\n    @at-root &[aria-selected=true] {\n      @include scheme-element-box-shadow-color(bf500, true, 'inset 0 0.125rem 0 0 $COLOR');\n      @include scheme-element-bg-color(t-plain, true, false);\n      @include scheme-element-text-color(bf500);\n      @include remove-hover();\n\n      @include after {\n        @include scheme-element-box-shadow-color(g300, true, '-1px 0 0 0 $COLOR, 1px 0 0 0 $COLOR');\n      }\n    }\n  }\n}\n","////\n/// Schemes Module : Element\n/// @group schemes\n////\n\n/// map des transitions par élément\n/// @type map\n$scheme-elements-transitions:() !global;\n\n/// Ajout d'une combinaison de couleur sur un élément pour un propriété donnée\n/// @access private\n/// @param {String} $set-name - nom de la combinaison comme défini dans settings/sets\n/// @@param {String} $prop - propriété affectée\n/// @param {Bool | String} $transition - objet auqel la transition de couleur est associée\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n/// @param {String | list}  $value - la valeur appliquée à la propriété. la variable $COLOR est remplacée par la custom property de la combinaison de couleur\n/// @param {String}  $element - le sélécteur de l'élément\n\n@mixin _scheme-element($set-name, $prop, $transition:false, $hover:false, $value:$COLOR, $element:&) {\n  // hover\n  @if $hover != false {\n    $set: map_get($scheme-sets, $set-name);\n    $light: _scheme-set-color($set, light);\n    $dark: _scheme-set-color($set, dark);\n\n    @at-root {\n      @if $hover != override {\n        #{$element} {\n          @include _scheme-element-hover();\n        }\n      }\n\n      #{$not-dark-theme-selector} {\n        #{$element} {\n          @include _get-hover-vars($light);\n        }\n\n        $i: 0;\n        @each $type, $variation in $scheme-blocks {\n          $i: ($i + 1);\n\n          [class*=\"#{$base-scheme}-#{$type}\"],\n          [class*=\"--scheme-#{$type}-\"] {\n            #{$element} {\n              @include _get-hover-vars(_scheme-set-color($set, $type));\n            }\n          }\n        }\n      }\n\n      #{$dark-theme-selector} #{$element} {\n        @include _get-hover-vars($dark);\n      }\n    }\n  }\n\n  // le $COLOR de la valeur est remplacé par la custom property de la couleur\n  #{$prop}: _replace_color($value, var(--#{$set-name}), false);\n\n  // transitions\n  @if $transition != false and $theme-allow-transition != false {\n    @if $transition == true {\n      $transition: $element;\n    }\n\n    $transitions:map_get($scheme-elements-transitions, $transition);\n    @if $transitions == null {\n      $transitions:();\n    }\n\n    $transitions:append($transitions, $prop $theme-transition-duration, $separator: comma);\n    $scheme-elements-transitions:map_merge($scheme-elements-transitions, ($transition:$transitions)) !global;\n\n    @include _theme-transition() {\n      transition: $transitions;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String} $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n@mixin scheme-element-bg-color($set-name, $transition:false, $hover:false) {\n  @include _scheme-element($set-name, background-color, $transition, $hover);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-text-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, color, $transition);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-fill-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, fill, $transition);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($set-name, $transition:false, $side:null, $value:1px solid $COLOR) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($set-name, $prop, $transition, false, $value);\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($set-name, $transition:false, $value:1px solid $COLOR) {\n  @include _scheme-element($set-name, outline, $transition, false, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($set-name, $transition:false, $value:inset 0 0 0 1px $COLOR) {\n  @include _scheme-element($set-name, box-shadow, $transition, false, $value);\n}\n","////\n/// Core Tools : Global strings\n/// @group core\n////\n\n@function _pow10($exponent) {\n  @if $exponent == 0 {\n    @return 1;\n  }\n  $result: 1;\n  @for $i from 1 through $exponent {\n    $result: $result * 10;\n  }\n  @return $result;\n}\n\n/// Fonction de transformation d'une string en nombre intégral\n/// @access public\n/// @param {String} $value - le nombre en chaîne de caractères\n@function str-to-num($value) {\n  $length: str-length($value);\n  $int: ();\n  $float: ();\n  $floating: false;\n  $neg: false;\n\n  @for $i from 1 through $length {\n    $n: str-slice($value, $i, $i);\n\n    @if $n == '.' {\n      $floating: true;\n    }\n    @else if $n == '-' {\n      $neg: true;\n    }\n    @else {\n      @for $d from 0 through 9 {\n        @if quote($d) == $n {\n          @if $floating {\n            $float: append($float, $d);\n          }\n          @else {\n            $int: append($int, $d);\n          }\n        }\n      }\n    }\n  }\n\n  $result: 0;\n\n  $length: length($int);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($int, $i) * _pow10($length - $i));\n    }\n  }\n\n  $length: length($float);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($float, $i) / _pow10($i));\n    }\n  }\n\n  @if $neg {\n    @return -$result;\n  }\n  @else {\n    @return $result;\n  }\n}\n\n/// Remplacement dans une chaine de caractères\n/// @access public\n/// @param {String} $stack - chaine de caractère où chercher\n/// @param {String} $needle - élément à chercher\n/// @param {String} $content - élément de remplacement\n/// @return {String} la chaîne de caractères transformée\n@function str-replace($stack, $needle, $content) {\n  $is:quote($stack);\n  $in:quote($needle);\n  $ic:quote($content);\n\n  $i:str-index($is, $in);\n\n  @while $i != null {\n    $is:unquote(str_slice($is, 1, $i - 1) + $ic + str_slice($is, $i + str-length($in), str_length($is)));\n    $i:str-index($is, $in);\n  }\n\n  @return unquote($is);\n}\n\n/// Découpage d'une chaine de caractères avec un séparateur particulier\n/// @access public\n/// @param {String} $string - chaine de caractère à découper\n/// @param {String} $separator - séparateur\n@function str-split($string, $separator:',') {\n  $tmp: str-slice($string, 1);\n  $list: ();\n  $index: str-index($string, $separator);\n\n  @if $index == null {\n    $list: ($string);\n  }\n  @else {\n    $list: join((str-slice($string, 1, $index - 1)), str-split(str-slice($string, $index + 1), $separator));\n  }\n  @return $list;\n}\n","////\n/// Schemes Module : Hover\n/// @group schemes\n////\n\n/// Définit les couleurs d'hover\n/// @access private\n/// @param {Color} $color - couleur de l'élément\n/// @param {Bool} $is-block - est-ce que cette définition se fait au niveau d'un block de combinaison ?\n@mixin _get-hover-vars($color, $is-block: false) {\n\n  @if opacity($color) != 0 {\n\n    $prop: color;\n\n    @if $is-block {\n      $prop: block-color;\n    }\n\n    --#{$prop}-hover: #{ _overlay-color($color, 1) };\n    --#{$prop}-active: #{ _overlay-color($color, 2) };\n  }\n  @else {\n    --color-hover: var(--block-color-hover);\n    --color-active: var(--block-color-active);\n  }\n}\n\n/// Applique le hover sur un élément\n/// @access private\n@mixin _scheme-element-hover() {\n  @media (hover: hover) and (pointer: fine) {\n    $selectors: ('&:not(a):not(:disabled)');\n    $a: selector-associate(&, 'a[href]');\n    @if length($a) {\n      $selectors: append($selectors, $a, 'comma');\n    }\n    @at-root #{$selectors} {\n      &:hover {\n        background-image: linear-gradient(0deg, var(--color-hover), var(--color-hover));\n      }\n\n      &:active {\n        background-image: linear-gradient(0deg, var(--color-active), var(--color-active));\n      }\n    }\n  }\n}\n\n@mixin remove-hover() {\n  &:hover,\n  &:active {\n    &:not([disabled]),\n    &:not(:disabled) {\n      background-image: none;\n    }\n  }\n}\n","////\n/// Core Tools : Global disabled\n/// @group core\n////\n\n@function get-disabled-color($type) {\n  @return map_get($disabled-color-sets, $type);\n}\n\n@mixin disabled-colors($text:true, $background:false, $box-shadow-border: false) {\n  @if $text {\n    @include scheme-element-text-color(get-disabled-color(text));\n  }\n\n  @if $background {\n    @include scheme-element-bg-color(get-disabled-color(background));\n  }\n\n  @if $box-shadow-border == true {\n    @include scheme-element-box-shadow-color(get-disabled-color(border));\n  }\n  @else if $box-shadow-border == border {\n    @include scheme-element-border-color(get-disabled-color(border));\n  }\n  @else if $box-shadow-border != false {\n    @include scheme-element-box-shadow-color(get-disabled-color(border), false, $box-shadow-border);\n  }\n}\n\n@mixin disabled($text:true, $background:false, $box-shadow-border: false, $descendant:null) {\n  &[disabled],\n  &:disabled {\n    @if $descendant != null {\n      #{$descendant} {\n        @include disabled-colors($text, $background, $box-shadow-border);\n        @content;\n      }\n    }\n    @else {\n      @include disabled-colors($text, $background, $box-shadow-border);\n      @content;\n    }\n  }\n}\n","////\n/// Core Tools : Global breakpoints\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n"]}